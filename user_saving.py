from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, Session
from werkzeug.security import generate_password_hash, check_password_hash


# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = "sqlite:///./test_database.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# üîπ –¢–∞–±–ª–∏—Ü—è Email
class Email(Base):
    __tablename__ = "emails"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, nullable=False)

# üîπ –¢–∞–±–ª–∏—Ü—è –ü–∞—Ä–æ–ª—ñ–≤
class Password(Base):
    __tablename__ = "passwords"
    id = Column(Integer, primary_key=True, index=True)
    password_hash = Column(String, nullable=False)

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –¢–∞–±–ª–∏—Ü—è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)

    email_id = Column(Integer, ForeignKey("emails.id"))
    password_id = Column(Integer, ForeignKey("passwords.id"))

    email = relationship("Email")
    password = relationship("Password")

# üîπ –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def create_user(db: Session, username: str, email: str, password: str):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ —â–µ –Ω–µ–º–∞—î."""
    existing_email = db.query(Email).filter(Email.email == email).first()
    if existing_email:
        return {"error": "Email —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π"}

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è email —Ç–∞ –ø–∞—Ä–æ–ª—è
    email_entry = Email(email=email)
    password_entry = Password(password_hash=generate_password_hash(password))
    
    db.add(email_entry)
    db.add(password_entry)
    db.commit()
    db.refresh(email_entry)
    db.refresh(password_entry)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    new_user = User(username=username, email_id=email_entry.id, password_id=password_entry.id)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    
    return {"id": new_user.id, "username": new_user.username, "email": email_entry.email}

# üîπ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def user_exists(db: Session, email: str):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email."""
    return db.query(User).join(Email).filter(Email.email == email).first() is not None

# üîπ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def verify_password(db: Session, email: str, password: str):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = db.query(User).join(Email).filter(Email.email == email).first()
    if not user:
        return {"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    password_entry = db.query(Password).filter(Password.id == user.password_id).first()
    if check_password_hash(password_entry.password_hash, password):
        return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞", "user_id": user.id}
    
    return {"error": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å"}

# üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def delete_user(db: Session, user_id: int):
    """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID."""
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        db.query(Email).filter(Email.id == user.email_id).delete()
        db.query(Password).filter(Password.id == user.password_id).delete()
        db.delete(user)
        db.commit()
        return {"message": f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.username} –≤–∏–¥–∞–ª–µ–Ω–∏–π"}
    return {"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
Base.metadata.create_all(bind=engine)

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
if __name__ == "__main__":
    db = next(get_db())

    # ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    response = create_user(db, "JohnDoe", "john@example.com", "securepassword")
    print(response)

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    exists = user_exists(db, "john@example.com")
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î? {exists}")

    # ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    auth_response = verify_password(db, "john@example.com", "securepassword")
    print(auth_response)

    # ‚ùå –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
    auth_response_fail = verify_password(db, "john@example.com", "wrongpassword")
    print(auth_response_fail)

    # üóë –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    delete_response = delete_user(db, response["id"])
    print(delete_response)