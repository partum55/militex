{"ast":null,"code":"// frontend/src/utils/helpers.js\n/**\r\n * Helper functions for the application\r\n *//**\r\n * Gets the full image URL by appending the base API URL if needed\r\n * @param {string} imagePath - The image path from the API\r\n * @param {string} fallbackImage - Fallback image to use if imagePath is empty\r\n * @returns {string} Complete image URL\r\n */export const getImageUrl=function(imagePath){let fallbackImage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'/images/placeholder.jpg';if(!imagePath){return fallbackImage;}// If the image path already starts with http, it's already a complete URL\nif(imagePath.startsWith('http://')||imagePath.startsWith('https://')){return imagePath;}// If the image path starts with /media, it's a Django media file\nif(imagePath.startsWith('/media/')){return imagePath;}// If the image path starts with a slash, it's a relative path from the root\nif(imagePath.startsWith('/')){return imagePath;}// For Django media URLs that don't start with /media\nif(imagePath.includes('car_images/')||imagePath.includes('fundraiser_images/')){return`/media/${imagePath}`;}// Otherwise, prepend the API URL\nconst API_URL='/api/';return`${API_URL}${imagePath}`;};/**\r\n * Creates an object URL for a file object\r\n * @param {File} file - The file object to create a URL for\r\n * @returns {string} Object URL\r\n */export const createFilePreview=file=>{if(file&&typeof file==='object'){return URL.createObjectURL(file);}return null;};/**\r\n * Revokes an object URL to prevent memory leaks\r\n * @param {string} url - The object URL to revoke\r\n */export const revokeFilePreview=url=>{if(url&&url.startsWith('blob:')){URL.revokeObjectURL(url);}};/**\r\n * Debug uploaded files to see what's being sent in form data\r\n * @param {FormData} formData - The FormData object to debug\r\n * @param {Function} logger - Logging function (defaults to console.log)\r\n */export const debugFormData=function(formData){let logger=arguments.length>1&&arguments[1]!==undefined?arguments[1]:console.log;if(!formData||!(formData instanceof FormData)){logger('Not a valid FormData object');return;}logger('--- FormData Debug Start ---');// Log each entry in the FormData object\nfor(let pair of formData.entries()){const[key,value]=pair;if(value instanceof File){logger(`${key}: File object - name: ${value.name}, size: ${value.size} bytes, type: ${value.type}`);}else{logger(`${key}: ${value}`);}}logger('--- FormData Debug End ---');};/**\r\n * Check if the browser fully supports FormData functionality\r\n * @returns {Object} Support status report\r\n */export const checkBrowserFormDataSupport=()=>{const supportReport={formDataSupported:typeof FormData!=='undefined',fileReaderSupported:typeof FileReader!=='undefined',fileSupported:typeof File!=='undefined',blobSupported:typeof Blob!=='undefined'};console.log('Browser FormData support:',supportReport);// Create a test FormData to check if it works correctly\ntry{const testData=new FormData();const testBlob=new Blob(['test'],{type:'text/plain'});testData.append('testFile',testBlob,'test.txt');testData.append('testField','test value');supportReport.canCreateFormData=true;supportReport.canAppendToFormData=true;// Check if we can read back the data\nconst testFile=testData.get('testFile');supportReport.canRetrieveFile=testFile instanceof File||testFile instanceof Blob;supportReport.canRetrieveField=testData.get('testField')==='test value';console.log('FormData functionality check:',supportReport);return supportReport;}catch(error){console.error('Error testing FormData functionality:',error);supportReport.error=error.message;return supportReport;}};/**\r\n * Formats currency values\r\n * @param {number} value - The value to format\r\n * @param {string} currency - The currency code (default: USD)\r\n * @returns {string} Formatted currency value\r\n */export const formatCurrency=function(value){let currency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';if(typeof value!=='number'){value=parseFloat(value)||0;}return new Intl.NumberFormat('en-US',{style:'currency',currency:currency,minimumFractionDigits:0,maximumFractionDigits:0}).format(value);};/**\r\n * Formats dates in a user-friendly way\r\n * @param {string} dateString - ISO date string\r\n * @returns {string} Formatted date\r\n */export const formatDate=dateString=>{if(!dateString)return'';try{const date=new Date(dateString);if(isNaN(date.getTime())){return dateString;// Return original if not valid date\n}return new Intl.DateTimeFormat('en-US',{year:'numeric',month:'long',day:'numeric'}).format(date);}catch(e){console.error('Date formatting error:',e);return dateString;}};/**\r\n * Truncates text to a specific length with ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} Truncated text\r\n */export const truncateText=function(text){let length=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;if(!text)return'';if(text.length<=length)return text;return text.substring(0,length)+'...';};","map":{"version":3,"names":["getImageUrl","imagePath","fallbackImage","arguments","length","undefined","startsWith","includes","API_URL","createFilePreview","file","URL","createObjectURL","revokeFilePreview","url","revokeObjectURL","debugFormData","formData","logger","console","log","FormData","pair","entries","key","value","File","name","size","type","checkBrowserFormDataSupport","supportReport","formDataSupported","fileReaderSupported","FileReader","fileSupported","blobSupported","Blob","testData","testBlob","append","canCreateFormData","canAppendToFormData","testFile","get","canRetrieveFile","canRetrieveField","error","message","formatCurrency","currency","parseFloat","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","Date","isNaN","getTime","DateTimeFormat","year","month","day","e","truncateText","text","substring"],"sources":["C:/Users/bogda/Pyton programs/Web application OP/MILITEX/militex/frontend/src/utils/helpers.js"],"sourcesContent":["// frontend/src/utils/helpers.js\r\n\r\n/**\r\n * Helper functions for the application\r\n */\r\n\r\n/**\r\n * Gets the full image URL by appending the base API URL if needed\r\n * @param {string} imagePath - The image path from the API\r\n * @param {string} fallbackImage - Fallback image to use if imagePath is empty\r\n * @returns {string} Complete image URL\r\n */\r\nexport const getImageUrl = (imagePath, fallbackImage = '/images/placeholder.jpg') => {\r\n  if (!imagePath) {\r\n    return fallbackImage;\r\n  }\r\n  \r\n  // If the image path already starts with http, it's already a complete URL\r\n  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\r\n    return imagePath;\r\n  }\r\n  \r\n  // If the image path starts with /media, it's a Django media file\r\n  if (imagePath.startsWith('/media/')) {\r\n    return imagePath;\r\n  }\r\n\r\n  // If the image path starts with a slash, it's a relative path from the root\r\n  if (imagePath.startsWith('/')) {\r\n    return imagePath;\r\n  }\r\n\r\n  // For Django media URLs that don't start with /media\r\n  if (imagePath.includes('car_images/') || imagePath.includes('fundraiser_images/')) {\r\n    return `/media/${imagePath}`;\r\n  }\r\n\r\n  // Otherwise, prepend the API URL\r\n  const API_URL = '/api/';\r\n  return `${API_URL}${imagePath}`;\r\n};\r\n\r\n/**\r\n * Creates an object URL for a file object\r\n * @param {File} file - The file object to create a URL for\r\n * @returns {string} Object URL\r\n */\r\nexport const createFilePreview = (file) => {\r\n  if (file && typeof file === 'object') {\r\n    return URL.createObjectURL(file);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Revokes an object URL to prevent memory leaks\r\n * @param {string} url - The object URL to revoke\r\n */\r\nexport const revokeFilePreview = (url) => {\r\n  if (url && url.startsWith('blob:')) {\r\n    URL.revokeObjectURL(url);\r\n  }\r\n};\r\n\r\n/**\r\n * Debug uploaded files to see what's being sent in form data\r\n * @param {FormData} formData - The FormData object to debug\r\n * @param {Function} logger - Logging function (defaults to console.log)\r\n */\r\nexport const debugFormData = (formData, logger = console.log) => {\r\n  if (!formData || !(formData instanceof FormData)) {\r\n    logger('Not a valid FormData object');\r\n    return;\r\n  }\r\n\r\n  logger('--- FormData Debug Start ---');\r\n  // Log each entry in the FormData object\r\n  for (let pair of formData.entries()) {\r\n    const [key, value] = pair;\r\n    if (value instanceof File) {\r\n      logger(`${key}: File object - name: ${value.name}, size: ${value.size} bytes, type: ${value.type}`);\r\n    } else {\r\n      logger(`${key}: ${value}`);\r\n    }\r\n  }\r\n  logger('--- FormData Debug End ---');\r\n};\r\n\r\n/**\r\n * Check if the browser fully supports FormData functionality\r\n * @returns {Object} Support status report\r\n */\r\nexport const checkBrowserFormDataSupport = () => {\r\n  const supportReport = {\r\n    formDataSupported: typeof FormData !== 'undefined',\r\n    fileReaderSupported: typeof FileReader !== 'undefined',\r\n    fileSupported: typeof File !== 'undefined',\r\n    blobSupported: typeof Blob !== 'undefined'\r\n  };\r\n\r\n  console.log('Browser FormData support:', supportReport);\r\n\r\n  // Create a test FormData to check if it works correctly\r\n  try {\r\n    const testData = new FormData();\r\n    const testBlob = new Blob(['test'], { type: 'text/plain' });\r\n    testData.append('testFile', testBlob, 'test.txt');\r\n    testData.append('testField', 'test value');\r\n\r\n    supportReport.canCreateFormData = true;\r\n    supportReport.canAppendToFormData = true;\r\n\r\n    // Check if we can read back the data\r\n    const testFile = testData.get('testFile');\r\n    supportReport.canRetrieveFile = testFile instanceof File || testFile instanceof Blob;\r\n    supportReport.canRetrieveField = testData.get('testField') === 'test value';\r\n\r\n    console.log('FormData functionality check:', supportReport);\r\n    return supportReport;\r\n  } catch (error) {\r\n    console.error('Error testing FormData functionality:', error);\r\n    supportReport.error = error.message;\r\n    return supportReport;\r\n  }\r\n};\r\n\r\n/**\r\n * Formats currency values\r\n * @param {number} value - The value to format\r\n * @param {string} currency - The currency code (default: USD)\r\n * @returns {string} Formatted currency value\r\n */\r\nexport const formatCurrency = (value, currency = 'USD') => {\r\n  if (typeof value !== 'number') {\r\n    value = parseFloat(value) || 0;\r\n  }\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: currency,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Formats dates in a user-friendly way\r\n * @param {string} dateString - ISO date string\r\n * @returns {string} Formatted date\r\n */\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return '';\r\n\r\n  try {\r\n    const date = new Date(dateString);\r\n    if (isNaN(date.getTime())) {\r\n      return dateString; // Return original if not valid date\r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    }).format(date);\r\n  } catch (e) {\r\n    console.error('Date formatting error:', e);\r\n    return dateString;\r\n  }\r\n};\r\n\r\n/**\r\n * Truncates text to a specific length with ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} Truncated text\r\n */\r\nexport const truncateText = (text, length = 100) => {\r\n  if (!text) return '';\r\n  if (text.length <= length) return text;\r\n  return text.substring(0, length) + '...';\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}