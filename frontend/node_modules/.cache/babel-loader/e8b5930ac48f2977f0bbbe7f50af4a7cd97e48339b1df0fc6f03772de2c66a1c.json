{"ast":null,"code":"import api from'./api';/**\r\n * Fetches a CSRF token from the server and sets it as a cookie\r\n * This should be called when the app initializes\r\n * @returns {Promise<boolean>} Success status of the CSRF token fetch\r\n */const getCSRFToken=async()=>{try{const response=await api.get('/csrf/');if(response.status===200){console.log('CSRF token set successfully');return true;}else{console.error('Failed to get CSRF token - server returned:',response.status);return false;}}catch(error){console.error('Failed to get CSRF token:',error);return false;}};/**\r\n * Retrieves a cookie value by name\r\n * @param {string} name - The name of the cookie to retrieve\r\n * @returns {string|null} The cookie value or null if not found\r\n */export const getCsrfCookie=()=>{var _document$cookie$spli;return((_document$cookie$spli=document.cookie.split(';').map(cookie=>cookie.trim()).find(cookie=>cookie.startsWith('csrftoken=')))===null||_document$cookie$spli===void 0?void 0:_document$cookie$spli.split('=')[1])||null;};export default getCSRFToken;","map":{"version":3,"names":["api","getCSRFToken","response","get","status","console","log","error","getCsrfCookie","_document$cookie$spli","document","cookie","split","map","trim","find","startsWith"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/csrf.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Fetches a CSRF token from the server and sets it as a cookie\r\n * This should be called when the app initializes\r\n * @returns {Promise<boolean>} Success status of the CSRF token fetch\r\n */\r\nconst getCSRFToken = async () => {\r\n  try {\r\n    const response = await api.get('/csrf/');\r\n    if (response.status === 200) {\r\n      console.log('CSRF token set successfully');\r\n      return true;\r\n    } else {\r\n      console.error('Failed to get CSRF token - server returned:', response.status);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to get CSRF token:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a cookie value by name\r\n * @param {string} name - The name of the cookie to retrieve\r\n * @returns {string|null} The cookie value or null if not found\r\n */\r\nexport const getCsrfCookie = () => {\r\n  return document.cookie\r\n    .split(';')\r\n    .map(cookie => cookie.trim())\r\n    .find(cookie => cookie.startsWith('csrftoken='))\r\n    ?.split('=')[1] || null;\r\n};\r\n\r\nexport default getCSRFToken;\r\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAF,GAAG,CAACG,GAAG,CAAC,QAAQ,CAAC,CACxC,GAAID,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC3BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC1C,MAAO,KAAI,CACb,CAAC,IAAM,CACLD,OAAO,CAACE,KAAK,CAAC,6CAA6C,CAAEL,QAAQ,CAACE,MAAM,CAAC,CAC7E,MAAO,MAAK,CACd,CACF,CAAE,MAAOG,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CACjC,MAAO,EAAAA,qBAAA,CAAAC,QAAQ,CAACC,MAAM,CACnBC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACF,MAAM,EAAIA,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAC5BC,IAAI,CAACJ,MAAM,EAAIA,MAAM,CAACK,UAAU,CAAC,YAAY,CAAC,CAAC,UAAAP,qBAAA,iBAH3CA,qBAAA,CAIHG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAI,IAAI,CAC3B,CAAC,CAED,cAAe,CAAAX,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}