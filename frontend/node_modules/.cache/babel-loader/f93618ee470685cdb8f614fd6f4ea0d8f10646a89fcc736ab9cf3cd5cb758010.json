{"ast":null,"code":"// src/services/auth.service.js\nimport api from'./api';import jwt_decode from'jwt-decode';import axios from'axios';// Helper function to get CSRF token\nfunction getCookie(name){let cookieValue=null;if(document.cookie&&document.cookie!==''){const cookies=document.cookie.split(';');for(let cookie of cookies){cookie=cookie.trim();if(cookie.startsWith(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}const TOKEN_KEY='token';const REFRESH_TOKEN_KEY='refreshToken';const USER_KEY='user';const AuthService={login:async(username,password)=>{try{// Get CSRF token first\nawait axios.get('/csrf/',{withCredentials:true});// Get CSRF token from cookie\nconst csrftoken=getCookie('csrftoken');// Make login request with CSRF token\nconst response=await axios.post('/api/token/',{username,password},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});if(response.data.access){localStorage.setItem(TOKEN_KEY,response.data.access);localStorage.setItem(REFRESH_TOKEN_KEY,response.data.refresh);// Set the token in the axios default headers\naxios.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;// Fetch user data immediately after login\nconst userData=await api.get('users/me/');localStorage.setItem(USER_KEY,JSON.stringify(userData.data));return userData.data;}return null;}catch(error){console.error('Login error:',error);throw error;}},logout:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);// Remove the Authorization header\ndelete axios.defaults.headers.common['Authorization'];},register:async userData=>{// Get CSRF token\nconst csrftoken=getCookie('csrftoken');return axios.post('/api/users/',userData,{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});},getCurrentUser:async()=>{try{// Check if we have a token first\nconst token=localStorage.getItem(TOKEN_KEY);if(!token){throw new Error('No authentication token found');}// Set authorization header\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;const response=await api.get('users/me/');localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}catch(error){throw error;}},updateProfile:async userData=>{try{const response=await api.patch('users/me/',userData);localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}catch(error){throw error;}},getToken:()=>{return localStorage.getItem(TOKEN_KEY);},getRefreshToken:()=>{return localStorage.getItem(REFRESH_TOKEN_KEY);},isTokenValid:token=>{if(!token)return false;try{const decoded=jwt_decode(token);const currentTime=Date.now()/1000;// Check if token is expired\nreturn decoded.exp>currentTime;}catch(error){return false;}},refreshToken:async()=>{try{const refreshToken=AuthService.getRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}// Get CSRF token\nconst csrftoken=getCookie('csrftoken');const response=await axios.post('/api/token/refresh/',{refresh:refreshToken},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});if(response.data.access){localStorage.setItem(TOKEN_KEY,response.data.access);// Update authorization header\naxios.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;return response.data.access;}else{throw new Error('Access token not received');}}catch(error){// Clear tokens on refresh failure\nAuthService.logout();throw error;}},ensureValidToken:async()=>{const token=AuthService.getToken();if(!token){throw new Error('Not authenticated');}if(!AuthService.isTokenValid(token)){// Token expired, try to refresh\nreturn await AuthService.refreshToken();}return token;},isAuthenticated:()=>{const token=AuthService.getToken();return!!token&&AuthService.isTokenValid(token);}};export default AuthService;","map":{"version":3,"names":["api","jwt_decode","axios","getCookie","name","cookieValue","document","cookie","cookies","split","trim","startsWith","decodeURIComponent","substring","length","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthService","login","username","password","get","withCredentials","csrftoken","response","post","headers","data","access","localStorage","setItem","refresh","defaults","common","userData","JSON","stringify","error","console","logout","removeItem","register","getCurrentUser","token","getItem","Error","updateProfile","patch","getToken","getRefreshToken","isTokenValid","decoded","currentTime","Date","now","exp","refreshToken","ensureValidToken","isAuthenticated"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/auth.service.js"],"sourcesContent":["// src/services/auth.service.js\r\nimport api from './api';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESH_TOKEN_KEY = 'refreshToken';\r\nconst USER_KEY = 'user';\r\n\r\nconst AuthService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Get CSRF token first\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n\r\n      // Get CSRF token from cookie\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      // Make login request with CSRF token\r\n      const response = await axios.post('/api/token/', {\r\n        username,\r\n        password,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\r\n\r\n        // Set the token in the axios default headers\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        // Fetch user data immediately after login\r\n        const userData = await api.get('users/me/');\r\n        localStorage.setItem(USER_KEY, JSON.stringify(userData.data));\r\n\r\n        return userData.data;\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n\r\n    // Remove the Authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  },\r\n\r\n  register: async (userData) => {\r\n    // Get CSRF token\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    return axios.post('/api/users/', userData, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-CSRFToken': csrftoken\r\n      },\r\n      withCredentials: true\r\n    });\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    try {\r\n      // Check if we have a token first\r\n      const token = localStorage.getItem(TOKEN_KEY);\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      // Set authorization header\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n      const response = await api.get('users/me/');\r\n      localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.patch('users/me/', userData);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n\r\n  getRefreshToken: () => {\r\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\r\n  },\r\n\r\n  isTokenValid: (token) => {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // Check if token is expired\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    try {\r\n      const refreshToken = AuthService.getRefreshToken();\r\n\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      // Get CSRF token\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      const response = await axios.post('/api/token/refresh/', {\r\n        refresh: refreshToken,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n\r\n        // Update authorization header\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        return response.data.access;\r\n      } else {\r\n        throw new Error('Access token not received');\r\n      }\r\n    } catch (error) {\r\n      // Clear tokens on refresh failure\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  ensureValidToken: async () => {\r\n    const token = AuthService.getToken();\r\n\r\n    if (!token) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n\r\n    if (!AuthService.isTokenValid(token)) {\r\n      // Token expired, try to refresh\r\n      return await AuthService.refreshToken();\r\n    }\r\n\r\n    return token;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = AuthService.getToken();\r\n    return !!token && AuthService.isTokenValid(token);\r\n  }\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}