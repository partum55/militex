{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\partu\\\\Desktop\\\\militex\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport AuthService from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Load user data on mount\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        setLoading(true);\n\n        // Check for valid token\n        if (AuthService.isAuthenticated()) {\n          // Get user data\n          const userData = await AuthService.getCurrentUser();\n          setCurrentUser(userData);\n          setIsAuthenticated(true);\n        } else {\n          // Try to refresh token\n          try {\n            await AuthService.refreshToken();\n            const userData = await AuthService.getCurrentUser();\n            setCurrentUser(userData);\n            setIsAuthenticated(true);\n          } catch (refreshError) {\n            // Refresh failed, ensure logout\n            AuthService.logout();\n            setCurrentUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (err) {\n        console.error('Authentication initialization error:', err);\n        AuthService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await AuthService.login(username, password);\n      const userData = await AuthService.getCurrentUser();\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      return response;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await AuthService.register(userData);\n      return response;\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = useCallback(() => {\n    AuthService.logout();\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  }, []);\n\n  // Update user profile\n  const updateUserProfile = async updatedData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await AuthService.updateProfile(updatedData);\n      setCurrentUser(response);\n      return response;\n    } catch (err) {\n      console.error('Profile update error:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check token validity periodically (every 5 minutes)\n  useEffect(() => {\n    const checkTokenInterval = setInterval(() => {\n      if (currentUser && !AuthService.isAuthenticated()) {\n        // Token expired, try to refresh\n        AuthService.refreshToken().catch(() => {\n          // Refresh failed, logout\n          logout();\n        });\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => {\n      clearInterval(checkTokenInterval);\n    };\n  }, [currentUser, logout]);\n\n  // Context value\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"1HqypSyipgH34la++Hbafr6/a4s=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","AuthService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","initAuth","userData","getCurrentUser","refreshToken","refreshError","logout","err","console","login","username","password","response","register","updateUserProfile","updatedData","updateProfile","checkTokenInterval","setInterval","catch","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport AuthService from '../services/auth.service';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Load user data on mount\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Check for valid token\r\n        if (AuthService.isAuthenticated()) {\r\n          // Get user data\r\n          const userData = await AuthService.getCurrentUser();\r\n          setCurrentUser(userData);\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          // Try to refresh token\r\n          try {\r\n            await AuthService.refreshToken();\r\n            const userData = await AuthService.getCurrentUser();\r\n            setCurrentUser(userData);\r\n            setIsAuthenticated(true);\r\n          } catch (refreshError) {\r\n            // Refresh failed, ensure logout\r\n            AuthService.logout();\r\n            setCurrentUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Authentication initialization error:', err);\r\n        AuthService.logout();\r\n        setCurrentUser(null);\r\n        setIsAuthenticated(false);\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.login(username, password);\r\n      const userData = await AuthService.getCurrentUser();\r\n\r\n      setCurrentUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.register(userData);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = useCallback(() => {\r\n    AuthService.logout();\r\n    setCurrentUser(null);\r\n    setIsAuthenticated(false);\r\n  }, []);\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (updatedData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.updateProfile(updatedData);\r\n      setCurrentUser(response);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Profile update error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check token validity periodically (every 5 minutes)\r\n  useEffect(() => {\r\n    const checkTokenInterval = setInterval(() => {\r\n      if (currentUser && !AuthService.isAuthenticated()) {\r\n        // Token expired, try to refresh\r\n        AuthService.refreshToken()\r\n          .catch(() => {\r\n            // Refresh failed, logout\r\n            logout();\r\n          });\r\n      }\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => {\r\n      clearInterval(checkTokenInterval);\r\n    };\r\n  }, [currentUser, logout]);\r\n\r\n  // Context value\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    isAuthenticated,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUserProfile\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}