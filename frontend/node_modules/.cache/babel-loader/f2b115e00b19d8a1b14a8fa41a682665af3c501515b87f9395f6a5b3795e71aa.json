{"ast":null,"code":"// src/services/auth.service.js\nimport api from'./api';import jwt_decode from'jwt-decode';import axios from'axios';// Helper function to get CSRF token\nfunction getCookie(name){let cookieValue=null;if(document.cookie&&document.cookie!==''){const cookies=document.cookie.split(';');for(let cookie of cookies){cookie=cookie.trim();if(cookie.startsWith(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}const TOKEN_KEY='militex_token';const REFRESH_TOKEN_KEY='militex_refresh_token';const USER_KEY='militex_user';const AuthService={login:async(username,password)=>{try{// Clear any existing tokens first to avoid conflicts\nlocalStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);// Get CSRF token first\nawait axios.get('/csrf/',{withCredentials:true});// Get CSRF token from cookie\nconst csrftoken=getCookie('csrftoken');// Make login request with CSRF token\nconst response=await axios.post('/api/token/',{username,password},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});console.log(\"Login response:\",response.data);if(response.data.access){// Store tokens in localStorage\nlocalStorage.setItem(TOKEN_KEY,response.data.access);localStorage.setItem(REFRESH_TOKEN_KEY,response.data.refresh);// Set the token in the axios default headers\naxios.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;api.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;// Fetch user data immediately after login\ntry{const userData=await api.get('/users/me/');if(userData.data){console.log(\"User data fetched:\",userData.data);localStorage.setItem(USER_KEY,JSON.stringify(userData.data));return userData.data;}else{console.error(\"User data response empty\");throw new Error(\"Failed to get user data\");}}catch(userError){console.error(\"Error fetching user data:\",userError);throw userError;}}else{console.error(\"No access token in response\");throw new Error(\"Authentication failed - no token received\");}}catch(error){console.error('Login error:',error);// Clear any partial auth data\nlocalStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);throw error;}},logout:()=>{// Clear auth data\nlocalStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);// Remove the Authorization header\ndelete axios.defaults.headers.common['Authorization'];delete api.defaults.headers.common['Authorization'];console.log(\"User logged out, auth data cleared\");},getCurrentUser:async()=>{try{// First check if we have user data in localStorage\nconst userStr=localStorage.getItem(USER_KEY);if(userStr){return JSON.parse(userStr);}// If no user data, check if we have a token\nconst token=AuthService.getToken();if(!token){throw new Error('No authentication token found');}// Set authorization header\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;api.defaults.headers.common['Authorization']=`Bearer ${token}`;// Fetch user data from API\nconst response=await api.get('/users/me/');if(response.data){localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}else{throw new Error(\"Failed to get user data\");}}catch(error){// If 401 error, try to refresh token\nif(error.response&&error.response.status===401){try{await AuthService.refreshToken();const response=await api.get('/users/me/');localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}catch(refreshError){// If refresh fails, logout\nAuthService.logout();throw refreshError;}}// For other errors, also ensure user is logged out to prevent state inconsistencies\nAuthService.logout();throw error;}},getToken:()=>{return localStorage.getItem(TOKEN_KEY);},getRefreshToken:()=>{return localStorage.getItem(REFRESH_TOKEN_KEY);},refreshToken:async()=>{try{const refreshToken=AuthService.getRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}// Get CSRF token\nawait axios.get('/csrf/',{withCredentials:true});const csrftoken=getCookie('csrftoken');const response=await axios.post('/api/token/refresh/',{refresh:refreshToken},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});if(response.data&&response.data.access){// Update token in localStorage\nlocalStorage.setItem(TOKEN_KEY,response.data.access);// Update authorization headers\naxios.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;api.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;return response.data.access;}else{throw new Error('Access token not received');}}catch(error){console.error(\"Token refresh error:\",error);// Clear tokens on refresh failure\nAuthService.logout();throw error;}},isTokenValid:token=>{if(!token)return false;try{const decoded=jwt_decode(token);const currentTime=Date.now()/1000;// Check if token is expired\nreturn decoded.exp>currentTime;}catch(error){return false;}},isAuthenticated:()=>{const token=AuthService.getToken();return!!token&&AuthService.isTokenValid(token);}};export default AuthService;","map":{"version":3,"names":["api","jwt_decode","axios","getCookie","name","cookieValue","document","cookie","cookies","split","trim","startsWith","decodeURIComponent","substring","length","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthService","login","username","password","localStorage","removeItem","get","withCredentials","csrftoken","response","post","headers","console","log","data","access","setItem","refresh","defaults","common","userData","JSON","stringify","error","Error","userError","logout","getCurrentUser","userStr","getItem","parse","token","getToken","status","refreshToken","refreshError","getRefreshToken","isTokenValid","decoded","currentTime","Date","now","exp","isAuthenticated"],"sources":["C:/Users/bogda/Pyton programs/Web application OP/MILITEX/militex/frontend/src/services/auth.service.js"],"sourcesContent":["// src/services/auth.service.js\r\nimport api from './api';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nconst TOKEN_KEY = 'militex_token';\r\nconst REFRESH_TOKEN_KEY = 'militex_refresh_token';\r\nconst USER_KEY = 'militex_user';\r\n\r\nconst AuthService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Clear any existing tokens first to avoid conflicts\r\n      localStorage.removeItem(TOKEN_KEY);\r\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n      localStorage.removeItem(USER_KEY);\r\n\r\n      // Get CSRF token first\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n\r\n      // Get CSRF token from cookie\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      // Make login request with CSRF token\r\n      const response = await axios.post('/api/token/', {\r\n        username,\r\n        password,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      console.log(\"Login response:\", response.data);\r\n\r\n      if (response.data.access) {\r\n        // Store tokens in localStorage\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\r\n\r\n        // Set the token in the axios default headers\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        // Fetch user data immediately after login\r\n        try {\r\n          const userData = await api.get('/users/me/');\r\n\r\n          if (userData.data) {\r\n            console.log(\"User data fetched:\", userData.data);\r\n            localStorage.setItem(USER_KEY, JSON.stringify(userData.data));\r\n            return userData.data;\r\n          } else {\r\n            console.error(\"User data response empty\");\r\n            throw new Error(\"Failed to get user data\");\r\n          }\r\n        } catch (userError) {\r\n          console.error(\"Error fetching user data:\", userError);\r\n          throw userError;\r\n        }\r\n      } else {\r\n        console.error(\"No access token in response\");\r\n        throw new Error(\"Authentication failed - no token received\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      // Clear any partial auth data\r\n      localStorage.removeItem(TOKEN_KEY);\r\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n      localStorage.removeItem(USER_KEY);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    // Clear auth data\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n\r\n    // Remove the Authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    delete api.defaults.headers.common['Authorization'];\r\n\r\n    console.log(\"User logged out, auth data cleared\");\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    try {\r\n      // First check if we have user data in localStorage\r\n      const userStr = localStorage.getItem(USER_KEY);\r\n      if (userStr) {\r\n        return JSON.parse(userStr);\r\n      }\r\n\r\n      // If no user data, check if we have a token\r\n      const token = AuthService.getToken();\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      // Set authorization header\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n      // Fetch user data from API\r\n      const response = await api.get('/users/me/');\r\n      if (response.data) {\r\n        localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n        return response.data;\r\n      } else {\r\n        throw new Error(\"Failed to get user data\");\r\n      }\r\n    } catch (error) {\r\n      // If 401 error, try to refresh token\r\n      if (error.response && error.response.status === 401) {\r\n        try {\r\n          await AuthService.refreshToken();\r\n          const response = await api.get('/users/me/');\r\n          localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n          return response.data;\r\n        } catch (refreshError) {\r\n          // If refresh fails, logout\r\n          AuthService.logout();\r\n          throw refreshError;\r\n        }\r\n      }\r\n      // For other errors, also ensure user is logged out to prevent state inconsistencies\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n\r\n  getRefreshToken: () => {\r\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    try {\r\n      const refreshToken = AuthService.getRefreshToken();\r\n\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      // Get CSRF token\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      const response = await axios.post('/api/token/refresh/', {\r\n        refresh: refreshToken,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data && response.data.access) {\r\n        // Update token in localStorage\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n\r\n        // Update authorization headers\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        return response.data.access;\r\n      } else {\r\n        throw new Error('Access token not received');\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Token refresh error:\", error);\r\n      // Clear tokens on refresh failure\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  isTokenValid: (token) => {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // Check if token is expired\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = AuthService.getToken();\r\n    return !!token && AuthService.isTokenValid(token);\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}