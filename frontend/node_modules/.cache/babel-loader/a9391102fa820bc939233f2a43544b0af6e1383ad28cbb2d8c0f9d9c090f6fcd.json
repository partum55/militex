{"ast":null,"code":"import axios from'axios';const api=axios.create({baseURL:'/api/',// Use relative URL\nheaders:{'Content-Type':'application/json'},withCredentials:true// Important for cookies\n});const token=localStorage.getItem('militex_token');if(token){api.defaults.headers.common['Authorization']=`Bearer ${token}`;}api.interceptors.request.use(config=>{if(config.headers['Content-Type']==='multipart/form-data'){var _config$method;console.log(`API File Upload Request: ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);if(config.data instanceof FormData){// Count files and fields\nlet fileCount=0;let fieldCount=0;const keys=new Set();for(let pair of config.data.entries()){keys.add(pair[0]);if(pair[1]instanceof File||pair[1]instanceof Blob){fileCount++;}else{fieldCount++;}}console.log(`FormData contains ${fileCount} file field(s) and ${fieldCount} regular field(s)`);console.log(`FormData keys: ${Array.from(keys).join(', ')}`);}}else{var _config$method2;console.log(`API Request: ${(_config$method2=config.method)===null||_config$method2===void 0?void 0:_config$method2.toUpperCase()} ${config.url}`,config.params||{});}const token=localStorage.getItem('militex_token');if(token){config.headers['Authorization']=`Bearer ${token}`;}return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});api.interceptors.response.use(response=>{return response;},async error=>{var _error$config,_error$config$headers,_error$response5;if(((_error$config=error.config)===null||_error$config===void 0?void 0:(_error$config$headers=_error$config.headers)===null||_error$config$headers===void 0?void 0:_error$config$headers['Content-Type'])==='multipart/form-data'){var _error$response,_error$response2,_error$response3;console.error('File Upload Error:',{url:error.config.url,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,data:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data});}else{var _error$response4;console.error('API Error:',((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message);}const originalRequest=error.config;if(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{console.log('Attempting token refresh...');const refreshToken=localStorage.getItem('militex_refresh_token');if(!refreshToken){throw new Error('No refresh token available');}const response=await axios.post('/api/token/refresh/',{refresh:refreshToken},{withCredentials:true});if(response.data.access){console.log('Token refresh successful');localStorage.setItem('militex_token',response.data.access);api.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;// Update the authorization header in the original request\noriginalRequest.headers['Authorization']=`Bearer ${response.data.access}`;// Retry the original request\nreturn axios(originalRequest);}else{throw new Error('Access token not received');}}catch(refreshError){console.error('Token refresh failed:',refreshError);localStorage.removeItem('militex_token');localStorage.removeItem('militex_refresh_token');localStorage.removeItem('militex_user');if(!window.location.pathname.includes('/login')){setTimeout(()=>{window.location.href='/login';},100);}return Promise.reject(refreshError);}}return Promise.reject(error);});// Export the api instance\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","token","localStorage","getItem","defaults","common","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","FormData","fileCount","fieldCount","keys","Set","pair","entries","add","File","Blob","Array","from","join","_config$method2","params","error","Promise","reject","response","_error$config","_error$config$headers","_error$response5","_error$response","_error$response2","_error$response3","status","statusText","_error$response4","message","originalRequest","_retry","refreshToken","Error","post","refresh","access","setItem","refreshError","removeItem","window","location","pathname","includes","setTimeout","href"],"sources":["C:/Users/bogda/Pyton programs/Web application OP/MILITEX/militex/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: '/api/',  // Use relative URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Important for cookies\r\n});\r\n\r\nconst token = localStorage.getItem('militex_token');\r\nif (token) {\r\n  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n}\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    if (config.headers['Content-Type'] === 'multipart/form-data') {\r\n      console.log(`API File Upload Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n\r\n      if (config.data instanceof FormData) {\r\n        // Count files and fields\r\n        let fileCount = 0;\r\n        let fieldCount = 0;\r\n        const keys = new Set();\r\n\r\n        for (let pair of config.data.entries()) {\r\n          keys.add(pair[0]);\r\n          if (pair[1] instanceof File || pair[1] instanceof Blob) {\r\n            fileCount++;\r\n          } else {\r\n            fieldCount++;\r\n          }\r\n        }\r\n\r\n        console.log(`FormData contains ${fileCount} file field(s) and ${fieldCount} regular field(s)`);\r\n        console.log(`FormData keys: ${Array.from(keys).join(', ')}`);\r\n      }\r\n    } else {\r\n      console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`, config.params || {});\r\n    }\r\n\r\n    const token = localStorage.getItem('militex_token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    if (error.config?.headers?.['Content-Type'] === 'multipart/form-data') {\r\n      console.error('File Upload Error:', {\r\n        url: error.config.url,\r\n        status: error.response?.status,\r\n        statusText: error.response?.statusText,\r\n        data: error.response?.data\r\n      });\r\n    } else {\r\n      console.error('API Error:', error.response?.data || error.message);\r\n    }\r\n\r\n    const originalRequest = error.config;\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        console.log('Attempting token refresh...');\r\n        const refreshToken = localStorage.getItem('militex_refresh_token');\r\n\r\n        if (!refreshToken) {\r\n          throw new Error('No refresh token available');\r\n        }\r\n\r\n        const response = await axios.post('/api/token/refresh/', {\r\n          refresh: refreshToken\r\n        }, {\r\n          withCredentials: true\r\n        });\r\n\r\n        if (response.data.access) {\r\n          console.log('Token refresh successful');\r\n          localStorage.setItem('militex_token', response.data.access);\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n          // Update the authorization header in the original request\r\n          originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n          // Retry the original request\r\n          return axios(originalRequest);\r\n        } else {\r\n          throw new Error('Access token not received');\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n\r\n        localStorage.removeItem('militex_token');\r\n        localStorage.removeItem('militex_refresh_token');\r\n        localStorage.removeItem('militex_user');\r\n\r\n        if (!window.location.pathname.includes('/login')) {\r\n          setTimeout(() => {\r\n            window.location.href = '/login';\r\n          }, 100);\r\n        }\r\n\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Export the api instance\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}