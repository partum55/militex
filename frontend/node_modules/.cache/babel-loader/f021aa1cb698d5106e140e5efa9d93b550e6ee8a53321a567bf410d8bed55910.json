{"ast":null,"code":"// frontend/src/services/car.service.js\nimport api from'./api';const CarService={// Get all cars with optional filters\ngetAllCars:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('cars/',{params});return response.data;}catch(error){console.error('Error in getAllCars:',error);throw error;}},// Import cars from Auto.ria (admin only)\nimportFromAutoria:async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{const response=await api.post('cars/import_from_autoria/',{limit});return response.data;}catch(error){console.error('Error importing from Auto.ria:',error);throw error;}},// Get car by ID\ngetCarById:async id=>{try{const response=await api.get(`cars/${id}/`);return response.data;}catch(error){console.error(`Error fetching car with ID ${id}:`,error);throw error;}},// Create a new car listing\ncreateCar:async carData=>{try{const response=await api.post('cars/',carData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Error creating car listing:',error);throw error;}},// Update an existing car listing\nupdateCar:async(id,carData)=>{try{// If carData is a FormData object, use it directly\n// Otherwise, create one (for backward compatibility)\nlet formDataObj=carData;if(!(carData instanceof FormData)){var _carData$uploaded_ima,_carData$images_to_de;formDataObj=new FormData();Object.keys(carData).forEach(key=>{if(key!=='uploaded_images'&&key!=='existing_images'&&key!=='images_to_delete'){formDataObj.append(key,carData[key]);}});if((_carData$uploaded_ima=carData.uploaded_images)!==null&&_carData$uploaded_ima!==void 0&&_carData$uploaded_ima.length){carData.uploaded_images.forEach(image=>{formDataObj.append('uploaded_images',image);});}if((_carData$images_to_de=carData.images_to_delete)!==null&&_carData$images_to_de!==void 0&&_carData$images_to_de.length){formDataObj.append('images_to_delete',JSON.stringify(carData.images_to_delete));}}const response=await api.patch(`cars/${id}/`,formDataObj,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error(`Error updating car with ID ${id}:`,error);throw error;}},// Delete a car listing\ndeleteCar:async id=>{try{await api.delete(`cars/${id}/`);return true;}catch(error){console.error(`Error deleting car with ID ${id}:`,error);throw error;}},// Get user's own listings\ngetMyListings:async()=>{try{const response=await api.get('cars/my_listings/');return response.data;}catch(error){console.error('Error fetching my listings:',error);throw error;}},// Search cars by keyword\nsearchCars:async searchQuery=>{try{const response=await api.get('cars/',{params:{search:searchQuery}});return response.data;}catch(error){console.error('Error searching cars:',error);throw error;}},// Filter cars with multiple criteria\nfilterCars:async filters=>{try{const response=await api.get('cars/',{params:filters});return response.data;}catch(error){console.error('Error filtering cars:',error);throw error;}},// Get featured (latest) cars\ngetFeaturedCars:async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3;try{const response=await api.get('cars/',{params:{limit:limit,ordering:'-created_at'}});return response.data.results;}catch(error){console.error('Error fetching featured cars:',error);throw error;}},// Delete a specific car image\ndeleteCarImage:async imageId=>{try{await api.delete(`car-images/${imageId}/`);return true;}catch(error){console.error(`Error deleting car image with ID ${imageId}:`,error);throw error;}}};export default CarService;","map":{"version":3,"names":["api","CarService","getAllCars","params","arguments","length","undefined","response","get","data","error","console","importFromAutoria","limit","post","getCarById","id","createCar","carData","headers","updateCar","formDataObj","FormData","_carData$uploaded_ima","_carData$images_to_de","Object","keys","forEach","key","append","uploaded_images","image","images_to_delete","JSON","stringify","patch","deleteCar","delete","getMyListings","searchCars","searchQuery","search","filterCars","filters","getFeaturedCars","ordering","results","deleteCarImage","imageId"],"sources":["C:/Users/bogda/Pyton programs/Web application OP/MILITEX/militex/frontend/src/services/car.service.js"],"sourcesContent":["// frontend/src/services/car.service.js\r\nimport api from './api';\r\n\r\nconst CarService = {\r\n  // Get all cars with optional filters\r\n  getAllCars: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('cars/', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getAllCars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Import cars from Auto.ria (admin only)\r\n  importFromAutoria: async (limit = 10) => {\r\n    try {\r\n      const response = await api.post('cars/import_from_autoria/', { limit });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error importing from Auto.ria:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get car by ID\r\n  getCarById: async (id) => {\r\n    try {\r\n      const response = await api.get(`cars/${id}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new car listing\r\n  createCar: async (carData) => {\r\n    try {\r\n      const response = await api.post('cars/', carData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating car listing:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing car listing\r\n  updateCar: async (id, carData) => {\r\n    try {\r\n      // If carData is a FormData object, use it directly\r\n      // Otherwise, create one (for backward compatibility)\r\n      let formDataObj = carData;\r\n\r\n      if (!(carData instanceof FormData)) {\r\n        formDataObj = new FormData();\r\n        Object.keys(carData).forEach((key) => {\r\n          if (key !== 'uploaded_images' && key !== 'existing_images' && key !== 'images_to_delete') {\r\n            formDataObj.append(key, carData[key]);\r\n          }\r\n        });\r\n\r\n        if (carData.uploaded_images?.length) {\r\n          carData.uploaded_images.forEach((image) => {\r\n            formDataObj.append('uploaded_images', image);\r\n          });\r\n        }\r\n\r\n        if (carData.images_to_delete?.length) {\r\n          formDataObj.append('images_to_delete', JSON.stringify(carData.images_to_delete));\r\n        }\r\n      }\r\n\r\n      const response = await api.patch(`cars/${id}/`, formDataObj, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a car listing\r\n  deleteCar: async (id) => {\r\n    try {\r\n      await api.delete(`cars/${id}/`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's own listings\r\n  getMyListings: async () => {\r\n    try {\r\n      const response = await api.get('cars/my_listings/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching my listings:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Search cars by keyword\r\n  searchCars: async (searchQuery) => {\r\n    try {\r\n      const response = await api.get('cars/', {\r\n        params: { search: searchQuery },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter cars with multiple criteria\r\n  filterCars: async (filters) => {\r\n    try {\r\n      const response = await api.get('cars/', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error filtering cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get featured (latest) cars\r\n  getFeaturedCars: async (limit = 3) => {\r\n    try {\r\n      const response = await api.get('cars/', {\r\n        params: {\r\n          limit: limit,\r\n          ordering: '-created_at',\r\n        },\r\n      });\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching featured cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a specific car image\r\n  deleteCarImage: async (imageId) => {\r\n    try {\r\n      await api.delete(`car-images/${imageId}/`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting car image with ID ${imageId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default CarService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}