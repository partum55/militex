{"ast":null,"code":"// frontend/src/services/car.service.js\nimport api from './api';\nconst CarService = {\n  // Get all cars with optional filters\n  getAllCars: async (params = {}) => {\n    try {\n      const response = await api.get('cars/', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in getAllCars:', error);\n      throw error;\n    }\n  },\n  // Import cars from Auto.ria (admin only)\n  importFromAutoria: async (limit = 10) => {\n    try {\n      const response = await api.post('cars/import_from_autoria/', {\n        limit\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error importing from Auto.ria:', error);\n      throw error;\n    }\n  },\n  // Get car by ID\n  getCarById: async id => {\n    try {\n      const response = await api.get(`cars/${id}/`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching car with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Create a new car listing\n  createCar: async carData => {\n    try {\n      const response = await api.post('cars/', carData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating car listing:', error);\n      throw error;\n    }\n  },\n  // Update an existing car listing\n  updateCar: async (id, carData) => {\n    try {\n      // If carData is a FormData object, use it directly\n      // Otherwise, create one (for backward compatibility)\n      let formDataObj = carData;\n      if (!(carData instanceof FormData)) {\n        var _carData$uploaded_ima, _carData$images_to_de;\n        formDataObj = new FormData();\n        Object.keys(carData).forEach(key => {\n          if (key !== 'uploaded_images' && key !== 'existing_images' && key !== 'images_to_delete') {\n            formDataObj.append(key, carData[key]);\n          }\n        });\n        if ((_carData$uploaded_ima = carData.uploaded_images) !== null && _carData$uploaded_ima !== void 0 && _carData$uploaded_ima.length) {\n          carData.uploaded_images.forEach(image => {\n            formDataObj.append('uploaded_images', image);\n          });\n        }\n        if ((_carData$images_to_de = carData.images_to_delete) !== null && _carData$images_to_de !== void 0 && _carData$images_to_de.length) {\n          formDataObj.append('images_to_delete', JSON.stringify(carData.images_to_delete));\n        }\n      }\n      const response = await api.patch(`cars/${id}/`, formDataObj, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating car with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a car listing\n  deleteCar: async id => {\n    try {\n      await api.delete(`cars/${id}/`);\n      return true;\n    } catch (error) {\n      console.error(`Error deleting car with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Get user's own listings\n  getMyListings: async () => {\n    try {\n      const response = await api.get('cars/my_listings/');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching my listings:', error);\n      throw error;\n    }\n  },\n  // Search cars by keyword\n  searchCars: async searchQuery => {\n    try {\n      const response = await api.get('cars/', {\n        params: {\n          search: searchQuery\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching cars:', error);\n      throw error;\n    }\n  },\n  // Filter cars with multiple criteria\n  filterCars: async filters => {\n    try {\n      const response = await api.get('cars/', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error filtering cars:', error);\n      throw error;\n    }\n  },\n  // Get featured (latest) cars\n  getFeaturedCars: async (limit = 3) => {\n    try {\n      const response = await api.get('cars/', {\n        params: {\n          limit: limit,\n          ordering: '-created_at'\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching featured cars:', error);\n      throw error;\n    }\n  },\n  // Delete a specific car image\n  deleteCarImage: async imageId => {\n    try {\n      await api.delete(`car-images/${imageId}/`);\n      return true;\n    } catch (error) {\n      console.error(`Error deleting car image with ID ${imageId}:`, error);\n      throw error;\n    }\n  }\n};\nexport default CarService;","map":{"version":3,"names":["api","CarService","getAllCars","params","response","get","data","error","console","importFromAutoria","limit","post","getCarById","id","createCar","carData","headers","updateCar","formDataObj","FormData","_carData$uploaded_ima","_carData$images_to_de","Object","keys","forEach","key","append","uploaded_images","length","image","images_to_delete","JSON","stringify","patch","deleteCar","delete","getMyListings","searchCars","searchQuery","search","filterCars","filters","getFeaturedCars","ordering","results","deleteCarImage","imageId"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/car.service.js"],"sourcesContent":["// frontend/src/services/car.service.js\r\nimport api from './api';\r\n\r\nconst CarService = {\r\n  // Get all cars with optional filters\r\n  getAllCars: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('cars/', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getAllCars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Import cars from Auto.ria (admin only)\r\n  importFromAutoria: async (limit = 10) => {\r\n    try {\r\n      const response = await api.post('cars/import_from_autoria/', { limit });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error importing from Auto.ria:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get car by ID\r\n  getCarById: async (id) => {\r\n    try {\r\n      const response = await api.get(`cars/${id}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new car listing\r\n  createCar: async (carData) => {\r\n    try {\r\n      const response = await api.post('cars/', carData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating car listing:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing car listing\r\n  updateCar: async (id, carData) => {\r\n    try {\r\n      // If carData is a FormData object, use it directly\r\n      // Otherwise, create one (for backward compatibility)\r\n      let formDataObj = carData;\r\n\r\n      if (!(carData instanceof FormData)) {\r\n        formDataObj = new FormData();\r\n        Object.keys(carData).forEach((key) => {\r\n          if (key !== 'uploaded_images' && key !== 'existing_images' && key !== 'images_to_delete') {\r\n            formDataObj.append(key, carData[key]);\r\n          }\r\n        });\r\n\r\n        if (carData.uploaded_images?.length) {\r\n          carData.uploaded_images.forEach((image) => {\r\n            formDataObj.append('uploaded_images', image);\r\n          });\r\n        }\r\n\r\n        if (carData.images_to_delete?.length) {\r\n          formDataObj.append('images_to_delete', JSON.stringify(carData.images_to_delete));\r\n        }\r\n      }\r\n\r\n      const response = await api.patch(`cars/${id}/`, formDataObj, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a car listing\r\n  deleteCar: async (id) => {\r\n    try {\r\n      await api.delete(`cars/${id}/`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting car with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's own listings\r\n  getMyListings: async () => {\r\n    try {\r\n      const response = await api.get('cars/my_listings/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching my listings:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Search cars by keyword\r\n  searchCars: async (searchQuery) => {\r\n    try {\r\n      const response = await api.get('cars/', {\r\n        params: { search: searchQuery },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter cars with multiple criteria\r\n  filterCars: async (filters) => {\r\n    try {\r\n      const response = await api.get('cars/', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error filtering cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get featured (latest) cars\r\n  getFeaturedCars: async (limit = 3) => {\r\n    try {\r\n      const response = await api.get('cars/', {\r\n        params: {\r\n          limit: limit,\r\n          ordering: '-created_at',\r\n        },\r\n      });\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching featured cars:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a specific car image\r\n  deleteCarImage: async (imageId) => {\r\n    try {\r\n      await api.delete(`car-images/${imageId}/`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting car image with ID ${imageId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default CarService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}