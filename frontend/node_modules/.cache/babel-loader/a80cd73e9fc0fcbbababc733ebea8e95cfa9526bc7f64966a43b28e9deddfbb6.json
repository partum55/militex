{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000 // 30 seconds timeout\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to refresh token if needed\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response$data, _error$response2, _error$response3;\n  // Default error object to return\n  const customError = {\n    message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'An unexpected error occurred',\n    status: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) || 500,\n    data: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {},\n    originalError: error\n  };\n  const originalRequest = error.config;\n\n  // Network error\n  if (!error.response) {\n    customError.message = 'Network error - please check your connection';\n    return Promise.reject(customError);\n  }\n\n  // If the error is 401 and hasn't been retried yet\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      // Try to get a new token\n      const response = await axios.post(`${API_URL}token/refresh/`, {\n        refresh: refreshToken\n      });\n\n      // If refresh successful, update tokens and retry original request\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('token', access);\n\n      // Update the authorization header\n      originalRequest.headers['Authorization'] = `Bearer ${access}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // If refresh fails, redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      customError.message = 'Your session has expired. Please log in again.';\n      customError.isAuthError = true;\n\n      // Redirect to login only if in browser environment\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n      return Promise.reject(customError);\n    }\n  }\n\n  // Handle common HTTP error responses\n  switch (error.response.status) {\n    case 400:\n      customError.message = 'Invalid request. Please check your data.';\n      break;\n    case 403:\n      customError.message = 'You do not have permission to perform this action.';\n      break;\n    case 404:\n      customError.message = 'The requested resource was not found.';\n      break;\n    case 429:\n      customError.message = 'Too many requests. Please try again later.';\n      break;\n    case 500:\n      customError.message = 'Server error. Please try again later.';\n      break;\n    default:\n      // Keep default message\n      break;\n  }\n\n  // Process validation errors (common in Django REST Framework)\n  if (error.response.status === 400 && typeof error.response.data === 'object') {\n    try {\n      const messages = [];\n      Object.entries(error.response.data).forEach(([field, errors]) => {\n        if (Array.isArray(errors)) {\n          messages.push(`${field}: ${errors.join(', ')}`);\n        } else if (typeof errors === 'string') {\n          messages.push(`${field}: ${errors}`);\n        }\n      });\n      if (messages.length > 0) {\n        customError.message = messages.join('\\n');\n        customError.validationErrors = error.response.data;\n      }\n    } catch (e) {\n      console.error('Error processing validation errors', e);\n    }\n  }\n  return Promise.reject(customError);\n});\n\n/**\r\n * Global error handler to integrate with a notification system\r\n * @param {Error} error - Error object from API \r\n * @param {Function} notifyFn - Optional notification function\r\n * @returns {Object} Standardized error object\r\n */\nexport const handleApiError = (error, notifyFn = null) => {\n  // Extract the custom error properties we added in the interceptor\n  const message = error.message || 'An unexpected error occurred';\n  const status = error.status || 500;\n\n  // Log the error to console (can be removed in production)\n  console.error(`API Error (${status}):`, message, error);\n\n  // If a notification function is provided, use it\n  if (notifyFn && typeof notifyFn === 'function') {\n    notifyFn({\n      type: 'error',\n      message: message,\n      title: `Error ${status}`,\n      duration: 5000\n    });\n  }\n  return {\n    message,\n    status,\n    data: error.data || {},\n    validationErrors: error.validationErrors || {},\n    isAuthError: error.isAuthError || false\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","_error$response$data","_error$response2","_error$response3","customError","message","data","detail","status","originalError","originalRequest","_retry","refreshToken","Error","post","refresh","access","setItem","refreshError","removeItem","isAuthError","window","location","href","messages","Object","entries","forEach","field","errors","Array","isArray","push","join","length","validationErrors","e","console","handleApiError","notifyFn","type","title","duration"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 30000, // 30 seconds timeout\r\n});\r\n\r\n// Add a request interceptor to add the auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to refresh token if needed\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    // Default error object to return\r\n    const customError = {\r\n      message: error.response?.data?.detail || 'An unexpected error occurred',\r\n      status: error.response?.status || 500,\r\n      data: error.response?.data || {},\r\n      originalError: error\r\n    };\r\n    \r\n    const originalRequest = error.config;\r\n    \r\n    // Network error\r\n    if (!error.response) {\r\n      customError.message = 'Network error - please check your connection';\r\n      return Promise.reject(customError);\r\n    }\r\n    \r\n    // If the error is 401 and hasn't been retried yet\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          throw new Error('No refresh token available');\r\n        }\r\n        \r\n        // Try to get a new token\r\n        const response = await axios.post(`${API_URL}token/refresh/`, {\r\n          refresh: refreshToken,\r\n        });\r\n        \r\n        // If refresh successful, update tokens and retry original request\r\n        const { access } = response.data;\r\n        localStorage.setItem('token', access);\r\n        \r\n        // Update the authorization header\r\n        originalRequest.headers['Authorization'] = `Bearer ${access}`;\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        // If refresh fails, redirect to login\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        \r\n        customError.message = 'Your session has expired. Please log in again.';\r\n        customError.isAuthError = true;\r\n        \r\n        // Redirect to login only if in browser environment\r\n        if (typeof window !== 'undefined') {\r\n          window.location.href = '/login';\r\n        }\r\n        \r\n        return Promise.reject(customError);\r\n      }\r\n    }\r\n    \r\n    // Handle common HTTP error responses\r\n    switch (error.response.status) {\r\n      case 400:\r\n        customError.message = 'Invalid request. Please check your data.';\r\n        break;\r\n      case 403:\r\n        customError.message = 'You do not have permission to perform this action.';\r\n        break;\r\n      case 404:\r\n        customError.message = 'The requested resource was not found.';\r\n        break;\r\n      case 429:\r\n        customError.message = 'Too many requests. Please try again later.';\r\n        break;\r\n      case 500:\r\n        customError.message = 'Server error. Please try again later.';\r\n        break;\r\n      default:\r\n        // Keep default message\r\n        break;\r\n    }\r\n    \r\n    // Process validation errors (common in Django REST Framework)\r\n    if (error.response.status === 400 && typeof error.response.data === 'object') {\r\n      try {\r\n        const messages = [];\r\n        Object.entries(error.response.data).forEach(([field, errors]) => {\r\n          if (Array.isArray(errors)) {\r\n            messages.push(`${field}: ${errors.join(', ')}`);\r\n          } else if (typeof errors === 'string') {\r\n            messages.push(`${field}: ${errors}`);\r\n          }\r\n        });\r\n        \r\n        if (messages.length > 0) {\r\n          customError.message = messages.join('\\n');\r\n          customError.validationErrors = error.response.data;\r\n        }\r\n      } catch (e) {\r\n        console.error('Error processing validation errors', e);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(customError);\r\n  }\r\n);\r\n\r\n/**\r\n * Global error handler to integrate with a notification system\r\n * @param {Error} error - Error object from API \r\n * @param {Function} notifyFn - Optional notification function\r\n * @returns {Object} Standardized error object\r\n */\r\nexport const handleApiError = (error, notifyFn = null) => {\r\n  // Extract the custom error properties we added in the interceptor\r\n  const message = error.message || 'An unexpected error occurred';\r\n  const status = error.status || 500;\r\n  \r\n  // Log the error to console (can be removed in production)\r\n  console.error(`API Error (${status}):`, message, error);\r\n  \r\n  // If a notification function is provided, use it\r\n  if (notifyFn && typeof notifyFn === 'function') {\r\n    notifyFn({\r\n      type: 'error',\r\n      message: message,\r\n      title: `Error ${status}`,\r\n      duration: 5000\r\n    });\r\n  }\r\n  \r\n  return {\r\n    message,\r\n    status,\r\n    data: error.data || {},\r\n    validationErrors: error.validationErrors || {},\r\n    isAuthError: error.isAuthError || false\r\n  };\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}