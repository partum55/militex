{"ast":null,"code":"// Improved login method in AuthService\nimport api from'./api';import jwt_decode from'jwt-decode';import axios from'axios';// Helper function to get CSRF token\nfunction getCookie(name){let cookieValue=null;if(document.cookie&&document.cookie!==''){const cookies=document.cookie.split(';');for(let cookie of cookies){cookie=cookie.trim();if(cookie.startsWith(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}const TOKEN_KEY='token';const REFRESH_TOKEN_KEY='refreshToken';const USER_KEY='user';const AuthService={login:async(username,password)=>{try{// Get CSRF token first\nawait axios.get('/csrf/',{withCredentials:true});// Get CSRF token from cookie\nconst csrftoken=getCookie('csrftoken');// Make login request with CSRF token\nconst response=await axios.post('/api/token/',{username,password},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});if(response.data.access){localStorage.setItem(TOKEN_KEY,response.data.access);localStorage.setItem(REFRESH_TOKEN_KEY,response.data.refresh);// Set the token in the axios default headers\naxios.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;api.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;// We'll let the component call getCurrentUser() separately\nreturn response.data;}throw new Error('No access token received');}catch(error){console.error('Login error:',error);throw error;}},getCurrentUser:async()=>{try{// Check if we have a token first\nconst token=localStorage.getItem(TOKEN_KEY);if(!token){throw new Error('No authentication token found');}// Set authorization header for both axios and api\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;api.defaults.headers.common['Authorization']=`Bearer ${token}`;// First try to get user from local storage to reduce API calls\nconst cachedUser=localStorage.getItem(USER_KEY);if(cachedUser){const userData=JSON.parse(cachedUser);const currentTime=Date.now()/1000;// Only use cached data if it's recent (less than 5 minutes old)\nif(userData._timestamp&&currentTime-userData._timestamp<300){return userData;}}// If no cached user or cache is stale, fetch from API\nconst response=await api.get('/users/me/');// Add timestamp to data before caching\nconst userData={...response.data,_timestamp:Date.now()/1000};localStorage.setItem(USER_KEY,JSON.stringify(userData));return userData;}catch(error){// If 401 error, try to refresh token\nif(error.response&&error.response.status===401){try{const newToken=await AuthService.refreshToken();if(newToken){const response=await api.get('/users/me/');const userData={...response.data,_timestamp:Date.now()/1000};localStorage.setItem(USER_KEY,JSON.stringify(userData));return userData;}throw new Error('Token refresh failed');}catch(refreshError){// If refresh fails, logout and throw error\nAuthService.logout();throw refreshError;}}throw error;}},refreshToken:async()=>{try{const refreshToken=localStorage.getItem(REFRESH_TOKEN_KEY);if(!refreshToken){throw new Error('No refresh token available');}// Get CSRF token\nawait axios.get('/csrf/',{withCredentials:true});const csrftoken=getCookie('csrftoken');const response=await axios.post('/api/token/refresh/',{refresh:refreshToken},{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});if(response.data.access){const newToken=response.data.access;localStorage.setItem(TOKEN_KEY,newToken);// Update authorization header\naxios.defaults.headers.common['Authorization']=`Bearer ${newToken}`;api.defaults.headers.common['Authorization']=`Bearer ${newToken}`;return newToken;}else{throw new Error('Access token not received');}}catch(error){// Clear tokens on refresh failure\nAuthService.logout();throw error;}},isTokenValid:token=>{if(!token)return false;try{const decoded=jwt_decode(token);const currentTime=Date.now()/1000;// Check if token is expired\nreturn decoded.exp>currentTime;}catch(error){return false;}},isAuthenticated:()=>{const token=localStorage.getItem(TOKEN_KEY);return!!token&&AuthService.isTokenValid(token);},logout:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);// Remove the Authorization header\ndelete axios.defaults.headers.common['Authorization'];delete api.defaults.headers.common['Authorization'];}};export default AuthService;","map":{"version":3,"names":["api","jwt_decode","axios","getCookie","name","cookieValue","document","cookie","cookies","split","trim","startsWith","decodeURIComponent","substring","length","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthService","login","username","password","get","withCredentials","csrftoken","response","post","headers","data","access","localStorage","setItem","refresh","defaults","common","Error","error","console","getCurrentUser","token","getItem","cachedUser","userData","JSON","parse","currentTime","Date","now","_timestamp","stringify","status","newToken","refreshToken","refreshError","logout","isTokenValid","decoded","exp","isAuthenticated","removeItem"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/auth.service.js"],"sourcesContent":["// Improved login method in AuthService\r\nimport api from './api';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESH_TOKEN_KEY = 'refreshToken';\r\nconst USER_KEY = 'user';\r\n\r\nconst AuthService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Get CSRF token first\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n\r\n      // Get CSRF token from cookie\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      // Make login request with CSRF token\r\n      const response = await axios.post('/api/token/', {\r\n        username,\r\n        password,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\r\n\r\n        // Set the token in the axios default headers\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        // We'll let the component call getCurrentUser() separately\r\n        return response.data;\r\n      }\r\n\r\n      throw new Error('No access token received');\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    try {\r\n      // Check if we have a token first\r\n      const token = localStorage.getItem(TOKEN_KEY);\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      // Set authorization header for both axios and api\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n      // First try to get user from local storage to reduce API calls\r\n      const cachedUser = localStorage.getItem(USER_KEY);\r\n      if (cachedUser) {\r\n        const userData = JSON.parse(cachedUser);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        // Only use cached data if it's recent (less than 5 minutes old)\r\n        if (userData._timestamp && (currentTime - userData._timestamp < 300)) {\r\n          return userData;\r\n        }\r\n      }\r\n\r\n      // If no cached user or cache is stale, fetch from API\r\n      const response = await api.get('/users/me/');\r\n\r\n      // Add timestamp to data before caching\r\n      const userData = {\r\n        ...response.data,\r\n        _timestamp: Date.now() / 1000\r\n      };\r\n\r\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n      return userData;\r\n    } catch (error) {\r\n      // If 401 error, try to refresh token\r\n      if (error.response && error.response.status === 401) {\r\n        try {\r\n          const newToken = await AuthService.refreshToken();\r\n          if (newToken) {\r\n            const response = await api.get('/users/me/');\r\n            const userData = {\r\n              ...response.data,\r\n              _timestamp: Date.now() / 1000\r\n            };\r\n            localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n            return userData;\r\n          }\r\n          throw new Error('Token refresh failed');\r\n        } catch (refreshError) {\r\n          // If refresh fails, logout and throw error\r\n          AuthService.logout();\r\n          throw refreshError;\r\n        }\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\r\n\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      // Get CSRF token\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      const response = await axios.post('/api/token/refresh/', {\r\n        refresh: refreshToken,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        const newToken = response.data.access;\r\n        localStorage.setItem(TOKEN_KEY, newToken);\r\n\r\n        // Update authorization header\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n\r\n        return newToken;\r\n      } else {\r\n        throw new Error('Access token not received');\r\n      }\r\n    } catch (error) {\r\n      // Clear tokens on refresh failure\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  isTokenValid: (token) => {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // Check if token is expired\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    return !!token && AuthService.isTokenValid(token);\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n\r\n    // Remove the Authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    delete api.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}