{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance for API calls\nconst api = axios.create({\n  baseURL: '/api/',\n  // Use relative URL\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for cookies\n});\n\n// Add logging for debugging API requests\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.params || {});\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for token refresh and error handling\napi.interceptors.response.use(response => {\n  // Optional: Log successful responses\n  // console.log('API Response:', response.data);\n  return response;\n}, async error => {\n  var _error$response, _error$response2;\n  // Log the error for debugging\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  const originalRequest = error.config;\n\n  // If error is 401 and we haven't tried refreshing yet\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      console.log('Attempting token refresh...');\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post('/api/token/refresh/', {\n        refresh: refreshToken\n      }, {\n        withCredentials: true // Ensure cookies are sent with this request too\n      });\n      if (response.data.access) {\n        console.log('Token refresh successful');\n        localStorage.setItem('token', response.data.access);\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n        // Update the authorization header in the original request\n        originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\n\n        // Retry the original request\n        return axios(originalRequest);\n      } else {\n        throw new Error('Access token not received');\n      }\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n\n      // If refresh fails, clear tokens and redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n\n      // Add a small delay before redirecting\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 100);\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Export the api instance\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","params","token","localStorage","getItem","error","Promise","reject","response","_error$response","_error$response2","data","message","originalRequest","status","_retry","refreshToken","Error","post","refresh","access","setItem","defaults","common","refreshError","removeItem","setTimeout","window","location","href"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance for API calls\r\nconst api = axios.create({\r\n  baseURL: '/api/',  // Use relative URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Important for cookies\r\n});\r\n\r\n// Add logging for debugging API requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`, config.params || {});\r\n    \r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for token refresh and error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // Optional: Log successful responses\r\n    // console.log('API Response:', response.data);\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Log the error for debugging\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    \r\n    const originalRequest = error.config;\r\n\r\n    // If error is 401 and we haven't tried refreshing yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        console.log('Attempting token refresh...');\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        \r\n        if (!refreshToken) {\r\n          throw new Error('No refresh token available');\r\n        }\r\n        \r\n        const response = await axios.post('/api/token/refresh/', {\r\n          refresh: refreshToken\r\n        }, {\r\n          withCredentials: true // Ensure cookies are sent with this request too\r\n        });\r\n\r\n        if (response.data.access) {\r\n          console.log('Token refresh successful');\r\n          localStorage.setItem('token', response.data.access);\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n          // Update the authorization header in the original request\r\n          originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n          // Retry the original request\r\n          return axios(originalRequest);\r\n        } else {\r\n          throw new Error('Access token not received');\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        \r\n        // If refresh fails, clear tokens and redirect to login\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        \r\n        // Add a small delay before redirecting\r\n        setTimeout(() => {\r\n          window.location.href = '/login';\r\n        }, 100);\r\n        \r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Export the api instance\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}