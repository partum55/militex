{"ast":null,"code":"// src/services/auth.service.js\nimport api from'./api';import jwt_decode from'jwt-decode';import axios from'axios';// Helper function to get CSRF token\nfunction getCookie(name){let cookieValue=null;if(document.cookie&&document.cookie!==''){const cookies=document.cookie.split(';');for(let cookie of cookies){cookie=cookie.trim();if(cookie.startsWith(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}const TOKEN_KEY='token';const REFRESH_TOKEN_KEY='refreshToken';const USER_KEY='user';const AuthService={login:async(username,password)=>{try{// Make login request with CSRF token\nconst response=await axios.post('/api/token/',{username,password},{headers:{'Content-Type':'application/json'},withCredentials:true});if(response.data.access){localStorage.setItem(TOKEN_KEY,response.data.access);localStorage.setItem(REFRESH_TOKEN_KEY,response.data.refresh);// Set the token in axios default headers\napi.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;}return response.data;}catch(error){console.error('Login error:',error);throw error;}},logout:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);// Remove Authorization header\ndelete api.defaults.headers.common['Authorization'];},register:async userData=>{try{// First ensure we get a fresh CSRF token\nawait axios.get('/csrf/',{withCredentials:true});// Get CSRF token from cookie\nconst csrftoken=getCookie('csrftoken');// Make registration request\nconst response=await axios.post('/api/users/',userData,{headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},withCredentials:true});return response.data;}catch(error){console.error('Registration error:',error);throw error;}},getCurrentUser:async()=>{try{const response=await api.get('users/me/');localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}catch(error){throw error;}},updateProfile:async userData=>{try{const response=await api.patch('users/me/',userData);localStorage.setItem(USER_KEY,JSON.stringify(response.data));return response.data;}catch(error){throw error;}},getToken:()=>{return localStorage.getItem(TOKEN_KEY);},getRefreshToken:()=>{return localStorage.getItem(REFRESH_TOKEN_KEY);},isTokenValid:token=>{if(!token)return false;try{const decoded=jwt_decode(token);const currentTime=Date.now()/1000;// Check if token is expired\nreturn decoded.exp>currentTime;}catch(error){return false;}},refreshToken:async()=>{try{const refreshToken=AuthService.getRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}const response=await axios.post('/api/token/refresh/',{refresh:refreshToken},{headers:{'Content-Type':'application/json'},withCredentials:true});if(response.data.access){localStorage.setItem(TOKEN_KEY,response.data.access);// Update Authorization header\napi.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;return response.data.access;}else{throw new Error('Access token not received');}}catch(error){// Clear tokens on refresh failure\nAuthService.logout();throw error;}},ensureValidToken:async()=>{const token=AuthService.getToken();if(!token){throw new Error('Not authenticated');}if(!AuthService.isTokenValid(token)){// Token expired, try to refresh\nreturn await AuthService.refreshToken();}return token;},isAuthenticated:()=>{const token=AuthService.getToken();return!!token&&AuthService.isTokenValid(token);}};export default AuthService;","map":{"version":3,"names":["api","jwt_decode","axios","getCookie","name","cookieValue","document","cookie","cookies","split","trim","startsWith","decodeURIComponent","substring","length","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthService","login","username","password","response","post","headers","withCredentials","data","access","localStorage","setItem","refresh","defaults","common","error","console","logout","removeItem","register","userData","get","csrftoken","getCurrentUser","JSON","stringify","updateProfile","patch","getToken","getItem","getRefreshToken","isTokenValid","token","decoded","currentTime","Date","now","exp","refreshToken","Error","ensureValidToken","isAuthenticated"],"sources":["C:/Users/bogda/Pyton programs/Web application OP/MILITEX/militex/frontend/src/services/auth.service.js"],"sourcesContent":["// src/services/auth.service.js\r\nimport api from './api';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESH_TOKEN_KEY = 'refreshToken';\r\nconst USER_KEY = 'user';\r\n\r\nconst AuthService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Make login request with CSRF token\r\n      const response = await axios.post('/api/token/', {\r\n        username,\r\n        password,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\r\n\r\n        // Set the token in axios default headers\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n    // Remove Authorization header\r\n    delete api.defaults.headers.common['Authorization'];\r\n  },\r\n\r\n  register: async (userData) => {\r\n    try {\r\n      // First ensure we get a fresh CSRF token\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n\r\n      // Get CSRF token from cookie\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      // Make registration request\r\n      const response = await axios.post('/api/users/', userData, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('users/me/');\r\n      localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.patch('users/me/', userData);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(response.data));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n\r\n  getRefreshToken: () => {\r\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\r\n  },\r\n\r\n  isTokenValid: (token) => {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // Check if token is expired\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    try {\r\n      const refreshToken = AuthService.getRefreshToken();\r\n\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      const response = await axios.post('/api/token/refresh/', {\r\n        refresh: refreshToken,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        // Update Authorization header\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n        return response.data.access;\r\n      } else {\r\n        throw new Error('Access token not received');\r\n      }\r\n    } catch (error) {\r\n      // Clear tokens on refresh failure\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  ensureValidToken: async () => {\r\n    const token = AuthService.getToken();\r\n\r\n    if (!token) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n\r\n    if (!AuthService.isTokenValid(token)) {\r\n      // Token expired, try to refresh\r\n      return await AuthService.refreshToken();\r\n    }\r\n\r\n    return token;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = AuthService.getToken();\r\n    return !!token && AuthService.isTokenValid(token);\r\n  }\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}