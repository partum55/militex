{"ast":null,"code":"// Improved login method in AuthService\nimport api from './api';\nimport jwt_decode from 'jwt-decode';\nimport axios from 'axios';\n\n// Helper function to get CSRF token\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let cookie of cookies) {\n      cookie = cookie.trim();\n      if (cookie.startsWith(name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nconst TOKEN_KEY = 'token';\nconst REFRESH_TOKEN_KEY = 'refreshToken';\nconst USER_KEY = 'user';\nconst AuthService = {\n  login: async (username, password) => {\n    try {\n      // Get CSRF token first\n      await axios.get('/csrf/', {\n        withCredentials: true\n      });\n\n      // Get CSRF token from cookie\n      const csrftoken = getCookie('csrftoken');\n\n      // Make login request with CSRF token\n      const response = await axios.post('/api/token/', {\n        username,\n        password\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrftoken\n        },\n        withCredentials: true\n      });\n      if (response.data.access) {\n        localStorage.setItem(TOKEN_KEY, response.data.access);\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\n\n        // Set the token in the axios default headers\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n        // We'll let the component call getCurrentUser() separately\n        return response.data;\n      }\n      throw new Error('No access token received');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      // Check if we have a token first\n      const token = localStorage.getItem(TOKEN_KEY);\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      // Set authorization header for both axios and api\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // First try to get user from local storage to reduce API calls\n      const cachedUser = localStorage.getItem(USER_KEY);\n      if (cachedUser) {\n        const userData = JSON.parse(cachedUser);\n        const currentTime = Date.now() / 1000;\n\n        // Only use cached data if it's recent (less than 5 minutes old)\n        if (userData._timestamp && currentTime - userData._timestamp < 300) {\n          return userData;\n        }\n      }\n\n      // If no cached user or cache is stale, fetch from API\n      const response = await api.get('/users/me/');\n\n      // Add timestamp to data before caching\n      const userData = {\n        ...response.data,\n        _timestamp: Date.now() / 1000\n      };\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      // If 401 error, try to refresh token\n      if (error.response && error.response.status === 401) {\n        try {\n          const newToken = await AuthService.refreshToken();\n          if (newToken) {\n            const response = await api.get('/users/me/');\n            const userData = {\n              ...response.data,\n              _timestamp: Date.now() / 1000\n            };\n            localStorage.setItem(USER_KEY, JSON.stringify(userData));\n            return userData;\n          }\n          throw new Error('Token refresh failed');\n        } catch (refreshError) {\n          // If refresh fails, logout and throw error\n          AuthService.logout();\n          throw refreshError;\n        }\n      }\n      throw error;\n    }\n  },\n  refreshToken: async () => {\n    try {\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      // Get CSRF token\n      await axios.get('/csrf/', {\n        withCredentials: true\n      });\n      const csrftoken = getCookie('csrftoken');\n      const response = await axios.post('/api/token/refresh/', {\n        refresh: refreshToken\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrftoken\n        },\n        withCredentials: true\n      });\n      if (response.data.access) {\n        const newToken = response.data.access;\n        localStorage.setItem(TOKEN_KEY, newToken);\n\n        // Update authorization header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n        return newToken;\n      } else {\n        throw new Error('Access token not received');\n      }\n    } catch (error) {\n      // Clear tokens on refresh failure\n      AuthService.logout();\n      throw error;\n    }\n  },\n  isTokenValid: token => {\n    if (!token) return false;\n    try {\n      const decoded = jwt_decode(token);\n      const currentTime = Date.now() / 1000;\n\n      // Check if token is expired\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return !!token && AuthService.isTokenValid(token);\n  },\n  logout: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n\n    // Remove the Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["api","jwt_decode","axios","getCookie","name","cookieValue","document","cookie","cookies","split","trim","startsWith","decodeURIComponent","substring","length","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthService","login","username","password","get","withCredentials","csrftoken","response","post","headers","data","access","localStorage","setItem","refresh","defaults","common","Error","error","console","getCurrentUser","token","getItem","cachedUser","userData","JSON","parse","currentTime","Date","now","_timestamp","stringify","status","newToken","refreshToken","refreshError","logout","isTokenValid","decoded","exp","isAuthenticated","removeItem"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/auth.service.js"],"sourcesContent":["// Improved login method in AuthService\r\nimport api from './api';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESH_TOKEN_KEY = 'refreshToken';\r\nconst USER_KEY = 'user';\r\n\r\nconst AuthService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      // Get CSRF token first\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n\r\n      // Get CSRF token from cookie\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      // Make login request with CSRF token\r\n      const response = await axios.post('/api/token/', {\r\n        username,\r\n        password,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        localStorage.setItem(TOKEN_KEY, response.data.access);\r\n        localStorage.setItem(REFRESH_TOKEN_KEY, response.data.refresh);\r\n\r\n        // Set the token in the axios default headers\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\r\n\r\n        // We'll let the component call getCurrentUser() separately\r\n        return response.data;\r\n      }\r\n\r\n      throw new Error('No access token received');\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    try {\r\n      // Check if we have a token first\r\n      const token = localStorage.getItem(TOKEN_KEY);\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      // Set authorization header for both axios and api\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n      // First try to get user from local storage to reduce API calls\r\n      const cachedUser = localStorage.getItem(USER_KEY);\r\n      if (cachedUser) {\r\n        const userData = JSON.parse(cachedUser);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        // Only use cached data if it's recent (less than 5 minutes old)\r\n        if (userData._timestamp && (currentTime - userData._timestamp < 300)) {\r\n          return userData;\r\n        }\r\n      }\r\n\r\n      // If no cached user or cache is stale, fetch from API\r\n      const response = await api.get('/users/me/');\r\n\r\n      // Add timestamp to data before caching\r\n      const userData = {\r\n        ...response.data,\r\n        _timestamp: Date.now() / 1000\r\n      };\r\n\r\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n      return userData;\r\n    } catch (error) {\r\n      // If 401 error, try to refresh token\r\n      if (error.response && error.response.status === 401) {\r\n        try {\r\n          const newToken = await AuthService.refreshToken();\r\n          if (newToken) {\r\n            const response = await api.get('/users/me/');\r\n            const userData = {\r\n              ...response.data,\r\n              _timestamp: Date.now() / 1000\r\n            };\r\n            localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n            return userData;\r\n          }\r\n          throw new Error('Token refresh failed');\r\n        } catch (refreshError) {\r\n          // If refresh fails, logout and throw error\r\n          AuthService.logout();\r\n          throw refreshError;\r\n        }\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\r\n\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      // Get CSRF token\r\n      await axios.get('/csrf/', { withCredentials: true });\r\n      const csrftoken = getCookie('csrftoken');\r\n\r\n      const response = await axios.post('/api/token/refresh/', {\r\n        refresh: refreshToken,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.access) {\r\n        const newToken = response.data.access;\r\n        localStorage.setItem(TOKEN_KEY, newToken);\r\n\r\n        // Update authorization header\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n\r\n        return newToken;\r\n      } else {\r\n        throw new Error('Access token not received');\r\n      }\r\n    } catch (error) {\r\n      // Clear tokens on refresh failure\r\n      AuthService.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  isTokenValid: (token) => {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // Check if token is expired\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    return !!token && AuthService.isTokenValid(token);\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n\r\n    // Remove the Authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    delete api.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}