{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext,useCallback}from'react';import AuthService from'../services/auth.service';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);// Load user data on mount\nuseEffect(()=>{const initAuth=async()=>{try{setLoading(true);// Check for valid token\nif(AuthService.isAuthenticated()){// Get user data\nconst userData=await AuthService.getCurrentUser();setCurrentUser(userData);setIsAuthenticated(true);}else{// Try to refresh token\ntry{await AuthService.refreshToken();const userData=await AuthService.getCurrentUser();setCurrentUser(userData);setIsAuthenticated(true);}catch(refreshError){// Refresh failed, ensure logout\nAuthService.logout();setCurrentUser(null);setIsAuthenticated(false);}}}catch(err){console.error('Authentication initialization error:',err);AuthService.logout();setCurrentUser(null);setIsAuthenticated(false);setError(err);}finally{setLoading(false);}};initAuth();},[]);// Login function\nconst login=async(username,password)=>{try{setLoading(true);setError(null);const response=await AuthService.login(username,password);const userData=await AuthService.getCurrentUser();setCurrentUser(userData);setIsAuthenticated(true);return response;}catch(err){console.error('Login error:',err);setError(err);throw err;}finally{setLoading(false);}};// Register function\nconst register=async userData=>{try{setLoading(true);setError(null);const response=await AuthService.register(userData);return response;}catch(err){console.error('Registration error:',err);setError(err);throw err;}finally{setLoading(false);}};// Logout function\nconst logout=useCallback(()=>{AuthService.logout();setCurrentUser(null);setIsAuthenticated(false);},[]);// Update user profile\nconst updateUserProfile=async updatedData=>{try{setLoading(true);setError(null);const response=await AuthService.updateProfile(updatedData);setCurrentUser(response);return response;}catch(err){console.error('Profile update error:',err);setError(err);throw err;}finally{setLoading(false);}};// Check token validity periodically (every 5 minutes)\nuseEffect(()=>{const checkTokenInterval=setInterval(()=>{if(currentUser&&!AuthService.isAuthenticated()){// Token expired, try to refresh\nAuthService.refreshToken().catch(()=>{// Refresh failed, logout\nlogout();});}},5*60*1000);// 5 minutes\nreturn()=>{clearInterval(checkTokenInterval);};},[currentUser,logout]);// Context value\nconst value={currentUser,loading,error,isAuthenticated,login,register,logout,updateUserProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","AuthService","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","initAuth","userData","getCurrentUser","refreshToken","refreshError","logout","err","console","login","username","password","response","register","updateUserProfile","updatedData","updateProfile","checkTokenInterval","setInterval","catch","clearInterval","value","Provider"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport AuthService from '../services/auth.service';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Load user data on mount\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Check for valid token\r\n        if (AuthService.isAuthenticated()) {\r\n          // Get user data\r\n          const userData = await AuthService.getCurrentUser();\r\n          setCurrentUser(userData);\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          // Try to refresh token\r\n          try {\r\n            await AuthService.refreshToken();\r\n            const userData = await AuthService.getCurrentUser();\r\n            setCurrentUser(userData);\r\n            setIsAuthenticated(true);\r\n          } catch (refreshError) {\r\n            // Refresh failed, ensure logout\r\n            AuthService.logout();\r\n            setCurrentUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Authentication initialization error:', err);\r\n        AuthService.logout();\r\n        setCurrentUser(null);\r\n        setIsAuthenticated(false);\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.login(username, password);\r\n      const userData = await AuthService.getCurrentUser();\r\n\r\n      setCurrentUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.register(userData);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = useCallback(() => {\r\n    AuthService.logout();\r\n    setCurrentUser(null);\r\n    setIsAuthenticated(false);\r\n  }, []);\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (updatedData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.updateProfile(updatedData);\r\n      setCurrentUser(response);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Profile update error:', err);\r\n      setError(err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check token validity periodically (every 5 minutes)\r\n  useEffect(() => {\r\n    const checkTokenInterval = setInterval(() => {\r\n      if (currentUser && !AuthService.isAuthenticated()) {\r\n        // Token expired, try to refresh\r\n        AuthService.refreshToken()\r\n          .catch(() => {\r\n            // Refresh failed, logout\r\n            logout();\r\n          });\r\n      }\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => {\r\n      clearInterval(checkTokenInterval);\r\n    };\r\n  }, [currentUser, logout]);\r\n\r\n  // Context value\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    isAuthenticated,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUserProfile\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}