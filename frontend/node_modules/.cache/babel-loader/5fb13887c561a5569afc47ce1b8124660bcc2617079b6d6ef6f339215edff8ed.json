{"ast":null,"code":"import api from './api';\nconst CarService = {\n  getAllCars: async params => {\n    try {\n      const response = await api.get('cars/', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getCarById: async id => {\n    try {\n      const response = await api.get(`cars/${id}/`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  createCar: async carData => {\n    // For file uploads, use FormData\n    const formData = new FormData();\n\n    // Add car data to formData\n    Object.keys(carData).forEach(key => {\n      if (key !== 'uploaded_images') {\n        formData.append(key, carData[key]);\n      }\n    });\n\n    // Add images to formData\n    if (carData.uploaded_images) {\n      carData.uploaded_images.forEach(image => {\n        formData.append('uploaded_images', image);\n      });\n    }\n    try {\n      const response = await api.post('cars/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateCar: async (id, carData) => {\n    // Similar to createCar, use FormData for updates with images\n    const formData = new FormData();\n    Object.keys(carData).forEach(key => {\n      if (key !== 'uploaded_images') {\n        formData.append(key, carData[key]);\n      }\n    });\n    if (carData.uploaded_images) {\n      carData.uploaded_images.forEach(image => {\n        formData.append('uploaded_images', image);\n      });\n    }\n    try {\n      const response = await api.patch(`cars/${id}/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  deleteCar: async id => {\n    try {\n      await api.delete(`cars/${id}/`);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getMyListings: async () => {\n    try {\n      const response = await api.get('cars/my_listings/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default CarService;","map":{"version":3,"names":["api","CarService","getAllCars","params","response","get","data","error","getCarById","id","createCar","carData","formData","FormData","Object","keys","forEach","key","append","uploaded_images","image","post","headers","updateCar","patch","deleteCar","delete","getMyListings"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/services/car.service.js"],"sourcesContent":["import api from './api';\r\n\r\nconst CarService = {\r\n  getAllCars: async (params) => {\r\n    try {\r\n      const response = await api.get('cars/', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCarById: async (id) => {\r\n    try {\r\n      const response = await api.get(`cars/${id}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createCar: async (carData) => {\r\n    // For file uploads, use FormData\r\n    const formData = new FormData();\r\n\r\n    // Add car data to formData\r\n    Object.keys(carData).forEach((key) => {\r\n      if (key !== 'uploaded_images') {\r\n        formData.append(key, carData[key]);\r\n      }\r\n    });\r\n\r\n    // Add images to formData\r\n    if (carData.uploaded_images) {\r\n      carData.uploaded_images.forEach((image) => {\r\n        formData.append('uploaded_images', image);\r\n      });\r\n    }\r\n\r\n    try {\r\n      const response = await api.post('cars/', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateCar: async (id, carData) => {\r\n    // Similar to createCar, use FormData for updates with images\r\n    const formData = new FormData();\r\n\r\n    Object.keys(carData).forEach((key) => {\r\n      if (key !== 'uploaded_images') {\r\n        formData.append(key, carData[key]);\r\n      }\r\n    });\r\n\r\n    if (carData.uploaded_images) {\r\n      carData.uploaded_images.forEach((image) => {\r\n        formData.append('uploaded_images', image);\r\n      });\r\n    }\r\n\r\n    try {\r\n      const response = await api.patch(`cars/${id}/`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteCar: async (id) => {\r\n    try {\r\n      await api.delete(`cars/${id}/`);\r\n      return true;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getMyListings: async () => {\r\n    try {\r\n      const response = await api.get('cars/my_listings/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default CarService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}