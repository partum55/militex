{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\partu\\\\Desktop\\\\militex\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport AuthService from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Load user data on mount\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        setLoading(true);\n\n        // Check for valid token\n        if (AuthService.isAuthenticated()) {\n          // Get user data\n          try {\n            const userData = await AuthService.getCurrentUser();\n            setCurrentUser(userData);\n            setIsAuthenticated(true);\n          } catch (userError) {\n            console.error('Error fetching user data:', userError);\n\n            // Try to refresh token\n            try {\n              await AuthService.refreshToken();\n              const userData = await AuthService.getCurrentUser();\n              setCurrentUser(userData);\n              setIsAuthenticated(true);\n            } catch (refreshError) {\n              console.error('Token refresh failed:', refreshError);\n              AuthService.logout();\n              setCurrentUser(null);\n              setIsAuthenticated(false);\n            }\n          }\n        } else {\n          // Try to refresh token\n          try {\n            await AuthService.refreshToken();\n            const userData = await AuthService.getCurrentUser();\n            setCurrentUser(userData);\n            setIsAuthenticated(true);\n          } catch (refreshError) {\n            // Refresh failed, ensure logout\n            AuthService.logout();\n            setCurrentUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (err) {\n        console.error('Authentication initialization error:', err);\n        AuthService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const userData = await AuthService.login(username, password);\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Login error:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || 'Failed to login. Please check your credentials.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await AuthService.register(userData);\n      return response.data;\n    } catch (err) {\n      var _err$response2;\n      console.error('Registration error:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || 'Failed to register. Please try again.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = useCallback(() => {\n    AuthService.logout();\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  }, []);\n\n  // Update user profile\n  const updateUserProfile = async updatedData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await AuthService.updateProfile(updatedData);\n      setCurrentUser(response);\n      return response;\n    } catch (err) {\n      var _err$response3;\n      console.error('Profile update error:', err);\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || 'Failed to update profile. Please try again.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check token validity periodically (every 5 minutes)\n  useEffect(() => {\n    const checkTokenInterval = setInterval(() => {\n      if (isAuthenticated && !AuthService.isAuthenticated()) {\n        // Token expired, try to refresh\n        AuthService.refreshToken().then(() => {\n          // Refresh successful, update user info\n          AuthService.getCurrentUser().then(userData => {\n            setCurrentUser(userData);\n          }).catch(err => {\n            console.error('Failed to get current user after token refresh:', err);\n            logout();\n          });\n        }).catch(() => {\n          // Refresh failed, logout\n          logout();\n        });\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => {\n      clearInterval(checkTokenInterval);\n    };\n  }, [isAuthenticated, logout]);\n\n  // Context value\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"1HqypSyipgH34la++Hbafr6/a4s=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","AuthService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","initAuth","userData","getCurrentUser","userError","console","refreshToken","refreshError","logout","err","login","username","password","_err$response","_err$response$data","response","data","detail","register","_err$response2","updateUserProfile","updatedData","updateProfile","_err$response3","checkTokenInterval","setInterval","then","catch","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport AuthService from '../services/auth.service';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Load user data on mount\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Check for valid token\r\n        if (AuthService.isAuthenticated()) {\r\n          // Get user data\r\n          try {\r\n            const userData = await AuthService.getCurrentUser();\r\n            setCurrentUser(userData);\r\n            setIsAuthenticated(true);\r\n          } catch (userError) {\r\n            console.error('Error fetching user data:', userError);\r\n\r\n            // Try to refresh token\r\n            try {\r\n              await AuthService.refreshToken();\r\n              const userData = await AuthService.getCurrentUser();\r\n              setCurrentUser(userData);\r\n              setIsAuthenticated(true);\r\n            } catch (refreshError) {\r\n              console.error('Token refresh failed:', refreshError);\r\n              AuthService.logout();\r\n              setCurrentUser(null);\r\n              setIsAuthenticated(false);\r\n            }\r\n          }\r\n        } else {\r\n          // Try to refresh token\r\n          try {\r\n            await AuthService.refreshToken();\r\n            const userData = await AuthService.getCurrentUser();\r\n            setCurrentUser(userData);\r\n            setIsAuthenticated(true);\r\n          } catch (refreshError) {\r\n            // Refresh failed, ensure logout\r\n            AuthService.logout();\r\n            setCurrentUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Authentication initialization error:', err);\r\n        AuthService.logout();\r\n        setCurrentUser(null);\r\n        setIsAuthenticated(false);\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const userData = await AuthService.login(username, password);\r\n      setCurrentUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return userData;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err.response?.data?.detail || 'Failed to login. Please check your credentials.');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.register(userData);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      setError(err.response?.data || 'Failed to register. Please try again.');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = useCallback(() => {\r\n    AuthService.logout();\r\n    setCurrentUser(null);\r\n    setIsAuthenticated(false);\r\n  }, []);\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (updatedData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await AuthService.updateProfile(updatedData);\r\n      setCurrentUser(response);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Profile update error:', err);\r\n      setError(err.response?.data || 'Failed to update profile. Please try again.');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check token validity periodically (every 5 minutes)\r\n  useEffect(() => {\r\n    const checkTokenInterval = setInterval(() => {\r\n      if (isAuthenticated && !AuthService.isAuthenticated()) {\r\n        // Token expired, try to refresh\r\n        AuthService.refreshToken()\r\n          .then(() => {\r\n            // Refresh successful, update user info\r\n            AuthService.getCurrentUser()\r\n              .then(userData => {\r\n                setCurrentUser(userData);\r\n              })\r\n              .catch(err => {\r\n                console.error('Failed to get current user after token refresh:', err);\r\n                logout();\r\n              });\r\n          })\r\n          .catch(() => {\r\n            // Refresh failed, logout\r\n            logout();\r\n          });\r\n      }\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => {\r\n      clearInterval(checkTokenInterval);\r\n    };\r\n  }, [isAuthenticated, logout]);\r\n\r\n  // Context value\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    isAuthenticated,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUserProfile\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}