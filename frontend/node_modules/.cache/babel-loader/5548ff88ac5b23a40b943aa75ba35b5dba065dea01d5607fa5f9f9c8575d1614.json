{"ast":null,"code":"// frontend/src/utils/helpers.js\n\n/**\r\n * Helper functions for the application\r\n */\n\n/**\r\n * Gets the full image URL by appending the base API URL if needed\r\n * @param {string} imagePath - The image path from the API\r\n * @param {string} fallbackImage - Fallback image to use if imagePath is empty\r\n * @returns {string} Complete image URL\r\n */\nexport const getImageUrl = (imagePath, fallbackImage = '/images/placeholder.jpg') => {\n  if (!imagePath) {\n    return fallbackImage;\n  }\n\n  // If the image path already starts with http, it's already a complete URL\n  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n    return imagePath;\n  }\n\n  // If the image path starts with /media, it's a Django media file\n  if (imagePath.startsWith('/media/')) {\n    return imagePath;\n  }\n\n  // If the image path starts with a slash, it's a relative path from the root\n  if (imagePath.startsWith('/')) {\n    return imagePath;\n  }\n\n  // For Django media URLs that don't start with /media\n  if (imagePath.includes('car_images/') || imagePath.includes('fundraiser_images/')) {\n    return `/media/${imagePath}`;\n  }\n\n  // Otherwise, prepend the API URL\n  const API_URL = '/api/';\n  return `${API_URL}${imagePath}`;\n};\n\n/**\r\n * Creates an object URL for a file object\r\n * @param {File} file - The file object to create a URL for\r\n * @returns {string} Object URL\r\n */\nexport const createFilePreview = file => {\n  if (file && typeof file === 'object') {\n    return URL.createObjectURL(file);\n  }\n  return null;\n};\n\n/**\r\n * Revokes an object URL to prevent memory leaks\r\n * @param {string} url - The object URL to revoke\r\n */\nexport const revokeFilePreview = url => {\n  if (url && url.startsWith('blob:')) {\n    URL.revokeObjectURL(url);\n  }\n};\n\n/**\r\n * Formats currency values\r\n * @param {number} value - The value to format\r\n * @param {string} currency - The currency code (default: USD)\r\n * @returns {string} Formatted currency value\r\n */\nexport const formatCurrency = (value, currency = 'USD') => {\n  if (typeof value !== 'number') {\n    value = parseFloat(value) || 0;\n  }\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\n/**\r\n * Formats dates in a user-friendly way\r\n * @param {string} dateString - ISO date string\r\n * @returns {string} Formatted date\r\n */\nexport const formatDate = dateString => {\n  if (!dateString) return '';\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) {\n      return dateString; // Return original if not valid date\n    }\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(date);\n  } catch (e) {\n    console.error('Date formatting error:', e);\n    return dateString;\n  }\n};\n\n/**\r\n * Truncates text to a specific length with ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} Truncated text\r\n */\nexport const truncateText = (text, length = 100) => {\n  if (!text) return '';\n  if (text.length <= length) return text;\n  return text.substring(0, length) + '...';\n};","map":{"version":3,"names":["getImageUrl","imagePath","fallbackImage","startsWith","includes","API_URL","createFilePreview","file","URL","createObjectURL","revokeFilePreview","url","revokeObjectURL","formatCurrency","value","currency","parseFloat","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","Date","isNaN","getTime","DateTimeFormat","year","month","day","e","console","error","truncateText","text","length","substring"],"sources":["C:/Users/partu/Desktop/militex/frontend/src/utils/helpers.js"],"sourcesContent":["// frontend/src/utils/helpers.js\r\n\r\n/**\r\n * Helper functions for the application\r\n */\r\n\r\n/**\r\n * Gets the full image URL by appending the base API URL if needed\r\n * @param {string} imagePath - The image path from the API\r\n * @param {string} fallbackImage - Fallback image to use if imagePath is empty\r\n * @returns {string} Complete image URL\r\n */\r\nexport const getImageUrl = (imagePath, fallbackImage = '/images/placeholder.jpg') => {\r\n  if (!imagePath) {\r\n    return fallbackImage;\r\n  }\r\n  \r\n  // If the image path already starts with http, it's already a complete URL\r\n  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\r\n    return imagePath;\r\n  }\r\n  \r\n  // If the image path starts with /media, it's a Django media file\r\n  if (imagePath.startsWith('/media/')) {\r\n    return imagePath;\r\n  }\r\n\r\n  // If the image path starts with a slash, it's a relative path from the root\r\n  if (imagePath.startsWith('/')) {\r\n    return imagePath;\r\n  }\r\n\r\n  // For Django media URLs that don't start with /media\r\n  if (imagePath.includes('car_images/') || imagePath.includes('fundraiser_images/')) {\r\n    return `/media/${imagePath}`;\r\n  }\r\n\r\n  // Otherwise, prepend the API URL\r\n  const API_URL = '/api/';\r\n  return `${API_URL}${imagePath}`;\r\n};\r\n\r\n/**\r\n * Creates an object URL for a file object\r\n * @param {File} file - The file object to create a URL for\r\n * @returns {string} Object URL\r\n */\r\nexport const createFilePreview = (file) => {\r\n  if (file && typeof file === 'object') {\r\n    return URL.createObjectURL(file);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Revokes an object URL to prevent memory leaks\r\n * @param {string} url - The object URL to revoke\r\n */\r\nexport const revokeFilePreview = (url) => {\r\n  if (url && url.startsWith('blob:')) {\r\n    URL.revokeObjectURL(url);\r\n  }\r\n};\r\n\r\n/**\r\n * Formats currency values\r\n * @param {number} value - The value to format\r\n * @param {string} currency - The currency code (default: USD)\r\n * @returns {string} Formatted currency value\r\n */\r\nexport const formatCurrency = (value, currency = 'USD') => {\r\n  if (typeof value !== 'number') {\r\n    value = parseFloat(value) || 0;\r\n  }\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: currency,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Formats dates in a user-friendly way\r\n * @param {string} dateString - ISO date string\r\n * @returns {string} Formatted date\r\n */\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return '';\r\n\r\n  try {\r\n    const date = new Date(dateString);\r\n    if (isNaN(date.getTime())) {\r\n      return dateString; // Return original if not valid date\r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    }).format(date);\r\n  } catch (e) {\r\n    console.error('Date formatting error:', e);\r\n    return dateString;\r\n  }\r\n};\r\n\r\n/**\r\n * Truncates text to a specific length with ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} Truncated text\r\n */\r\nexport const truncateText = (text, length = 100) => {\r\n  if (!text) return '';\r\n  if (text.length <= length) return text;\r\n  return text.substring(0, length) + '...';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}